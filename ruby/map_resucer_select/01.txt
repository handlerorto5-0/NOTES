определение map
output_array = [1,2,3,4,5].map do |number|
	number*number
end
или
output_array = [1,2,3,4,5].map{|element| element*element}
----------------------------------------------
определение редюсера
[1,2,3,4,5].reduce(0,:+)
или
[1,2,3,4,5].reduce(0) do |memo, element|
	memo + element
end
----------------------------------------------
прмер селект
[1,2,3,4,5].select do |element|
	element % 2 == 0
end
----------------------------------------------
преобразование массива в другой массив:
[1,3,5,6,7,8,6,0].reduce([]) do |memo, element|
	memo.unshift element
	puts "After unshifting element: #{element}, the memo is: #{memo.inspect}"
	memo
end
---------------------------------------------
преобразование массива в хеш:
[1,2,3,4,5].reduce({}) do |memo, element|
	memo[element] = element.to_s
	memo
end
=> {1=>"1", 2=>"2", 3=>"3", 4=>"4", 5=>"5"}
----------------------------------------------
чтобы найти нечетные числа последних пяти в последовательности:
sequence = [1,2,3,455,5,6,4,3,45,66,77,54,23,4,55,6,7]
sequence.reduce([nil,nil,nil,nil,nil]) do |memo, number|
	memo.push(number)
	memo.shift
	memo  !!! важно в редюсере выводить накопленный итог
end.select do |one_of_last_5|
	one_of_last_5%2 == 1
end
=> [23, 55, 7]
-----------------------------------------------
выбрать все четные начинающееся с семи:
(1..100).select{|number| number % 2 == 0}.select{|even_number| even_number.to_s[0] == "7"}
=> [70,72.74,76,78]
------------------------------------------------
фильтр, который сохраняет только четные числа:
[1,2,3,4,5].select do |number|
	predicate = number%2==0
end
------------------------------------------------
FizzBuzz
fizzbuzz_list = (1..15).map do |n|
	if n%6 == 0
		"fizzbuzz"
	elsif n%3 ==0
		"buzz"
	elsif n%2 == 0
		"fizz"
	else
		n.to_s
	end
end
-----------------------------------------------
Сортировать список имен по фамилии
File.open("names.txt","r")
	.read
	.split("\n")
	.map do |fullname|
		fullname.split(" ")
	end.map do |fullname|
		[fullname.split(" ")[1], fullname]
	end.sort do |a,b|
		a[0] <=> b[0]
	end.map do |key_with_name|
		key_with_name[1]
	end.join("\n")
-----------------------------------------------
Преобразование списка имен в CSV
csv_file_contents = File.open("names.txt","r").split("\n").map do |name|
	name.split(" ").reverse.join(",")
end.unshift("Surname,First Name","").join("\n")
----------------------------------------------
Обновить набор данных
province_file = File.open("name_prov.txt").read.split(("\n")
standard_name_lookup = File.open("standard_name_lookup.txt","r").read.split("\n")
	.map do |row|
		row.split(",")
	end.reduce({}) do |lookup_table, row|
		lookup_table.merge row[0] => row[1]
	end
standardized_province_file = province_file.map do |row|
		row.split(",")
	end.map do |split_row|
		[split_row[0], standard_name_lookup[split_row[1]]]
	end.map do |standardized_split_row|
		standardized_split_row.join(",")
	end.join("\n")
----------------------------------------------



















