Глава 5 Оптимизация с помощью Profiler cтр 73

Прежде чем вносить какие-либо серьезные архитектурные изменения в программу, давайте поищем самые низкие плоды в самой функции(Pick Low-Hanging Fruit)

Перед перепрофилированием мы запускаем тесты, чтобы убедиться, что мы ничего не сломали во время оптимизации.

Нам нужно будет сравнить профили до и после оптимизации, поэтому мы сохраним новый профиль в другом файле.
printer = RubyProf::CallTreePrinter.new(result)
printer.print(File.open("callgrind.out.app_optimized1", "w+"))

Следующий шаг в оптимизации - посмотреть на код на более высоком уровне абстракции

* Вместо определения типов в операторе if / else можно просто проанализировать или передать их.

Окончательный вывод делается  с помощью Benchmark.




















