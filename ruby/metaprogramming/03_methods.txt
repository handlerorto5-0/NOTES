Динамические методы

Вызов методов динамически:
obj = MyClass.new
obj.my_method(3) # => 6

С помошью send можно динамически подставлять названия методов
мспользование символа предпочтительней, для хранения имен метододов
obj.send(:my_method, 3) # => 6

Определение методов динамически:
define_method позволяет вам определить имя определенного метода во время выполнения
class MyClass
	define_method :my_method do |my_arg|
		my_arg * 3
	end
end
obj = MyClass.new
obj.my_method(2) # => 6
----------------------------------------
method_missing

method_missing позволяет вызывать методы, которых на самом деле не существует

class Lawyer
	def method_missing(method, *args)
		puts "You called: #{method}(#{args.join(', ')})"
		puts "(You also passed it a block)" if block_given?
	end
end
bob = Lawyer.new
bob.talk_simple('a', 'b') do
	# a block
end
❮ You called: talk_simple(a, b)
	(You also passed it a block)
-------------------------------------------
Dynamic Proxies Динамические прокси

объекты часто являются оболочками для чего-то еще - может быть, другого объекта, веб-службы или кода, написанного на другом языке. Они собирают вызовы методов через method_missing и перенаправляют их в завернутый объект
------------------------------------------
Ruby предоставляет чистый механизм для выволнения проверки response_to? при использовании method_missing

response_to_missing? определяет, является ли метод Призрачным.
-------------------------------------------
const_missing
Когда вы ссылаетесь на несуществующую константу, Ruby передает имя константы в const_missing как символ.

class Module
	def const_missing(const_name)
		case const_name
			when :something
			# ...
		end
	end
end
-------------------------------------------
Blank Slates чистое состояние

бывает что вызываемый метод конфликтует с встренным, из за одинакового названия
Тонкий класс с минимальным количеством методов называется чистым листом.

Вы можете удалить метод из класса, используя либо Module#undef_method, либо Module#remove_method. 
- undef_method удаляет любой метод, включая унаследованные
- remove_method удаляет метод из получателя, но оставляет только унаследованные методы.






























