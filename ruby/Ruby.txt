Far command
alt+F9 свернуть/развернуть окно
Ctrl+O перекл консоль
Shift+F4 создать файл
F2 сохранить файл
F3 просмотр файла
F4 редактировать файл
F5 скопировать с новым именем
F6 перенести
F7 создать папку
F8 удалить

РЕДАКТИРОВАНИЕ в far
#coding: utf-8 или #coding: cp866 кодировка, и F8 
Ctrl+n в начало
Ctrl+e в конец
Ctrl+a выделить всё


КОНСОЛЬ в Far 
ruby -Eutf-8, ruby --encoding utf-8 вызов с кодировкой
ruby -e 'puts "Hi"'
ruby -w запуск с предупреждениями warn
irb запуск ruby в консоли
exit выход irb
срелка вверх - предыдущая команда
cls очистка консоли
irb>ruby app1.rb выполнить код
irb>значене.class -какой тип 
irb> x.methods список операций с x
irb> "aaa".object_id - выводит id обьекта
ri Array вызов документации
gem help
notepad   file запуск в блокноте
ping ya.ru узнать ip
GET/ HTTP/1.0. -простейший запрос   
порты это абстракция   http - 80 https - 443 по умолчанию порты


Ruby
ОПЕРАТОРЫ

константы с заглавной
значене.class -какой тип 
puts- выести с троку с \n
p то же puts.inspect
print -вывод строки без \n
gets -получить строку из консоли
gets.chomp -получить с удалением \n
sleep 1 / sleep (1..5) / sleep (0.03..0.09)  ожидание
rand (5) щт 0 до 4 / rand (5..10) от 5 до 10  случайное чсло
== рвно 
!= не равно 
<= / >= 
=== case- оператор String==="str"(строка соответствует классу Строки)
=~ для сопоставления по шаблону  (!~)
<=> сравнивает левый и правый, возвю: -1 левый меньше, 0 равны, 1 левый больше, nil сравнить нельзя
a,b=b,a  обменять значение двух переменных
x,y=1,2 то же x=1 и y=2
x,y,z=[1,2,3] - передача значений массивои
exit прервать выполнение кода
break превать подпрограмму и выполнять код дальше
$ - префикс глобальных переменных
@- префикс экземпляра
@@- префикс переменных класса
alias method_1 method_2 переопределение имени метода
sum="#{'str'}" то же что и :str
%s[str] то же :'str' или :str
x||=y то же x=x||y означает что, если x равен nil или false, то x=y, иначе x=x
% - остаток от деления a%b==0

МЕТА-ПРОГРАМИРОВАНИЕ
         методы       |   вызов
def  mm               | mm
  puts ...            | send :mm
end                   | send "mm"
def mm par ..         |
end                   | send :mm,555
def mm  hh            |
	puts hh             | send :mm, 'aa'=>11, ...
end                   |
class ...             |
 attr_accessor :name  | s=Any.new
 def initialize       | puts s.name
 send 'name=','Slava' |
method_missing - вызывается приобращении к отсутствующему
методу класса
class Person
	def method_missing par1 -обязат от одного параметра
p=Person.new .... p.zero
define_method - когда название метода надо получить откудо то
send :define_method, 'aaa' do ... вызов aaa


РАБОТА с ФАЙЛАМИ
require './.file' подключение файла, './' указывать обязательно(ткушая папка),расширение не обязательно
ruby file.rb > file.html создание  !!!!!! осторожно заменит предыдущий
ruby file.rb >> file.txt добоваление в файл дописывает
File.rename 'file1', 'file2'
режимы r, w, r+, w+ , (чтение и немного записи...)
   a(appeend открыть для записи, курсор в конец)
intput=File.open "test.txt","r"
output=File.open "test.txt","w"
output.write "something"
while line=input.gets
	puts line
end
output.close
в линуксе chmod 777 file.rb
File.chmod 777 file.rb -смена атрибутов доступа
r, w , x (execute-выполнить)
  0 1 2 3 4 5 6 7     7  |  7  |  7
r 0 0 0 0 1 1 1 1  owner |group| остальные
w 0 0 1 1 0 0 1 1
x 0 1 0 1 0 1 0 1
распространёные 755, 666, 644
Dir.pwd - print working directry, путь в текущию
Dir.chdir "имя папки или путь"сменить директорию
Dir.entries "путь" возвращает массив файлов и каталогов

Range -диапазоны
r='a'..'z' включающий
r='aa'...'zz' исключающий
'aa'.succ это 'bb', 'bb'.succ это 'cc'
r.cover?
r.include? 
r.member?
r.eaср {..}
r.step(2) {...}
r.to_a
1.between?(0.10)


МЕТОДЫ
to_i проивести к числу
to_f привести к числу с точкой
to_s привести к строке
x.method? ? всегда возвражает bool
to_sun
.select 
.join
@error=hh.select(|key,_| params[key]='').values.join(", ")

	


числа которые начинаются 0, читаются, как восмеричные
числа которые начинаются 0х 0Х, читаются, шеснадцатиричные
числа которые начинаются 0b 0B, читаются, как двоичные
6.02e23  это 6.02 * 10 в 23 степени
x**4 возведение в степень
x**(1.0/4.0) корень в 4 степени из x
1.23456.floor(2) -> 1.23
35 678.45.floor(-3) -> 35 000
1.76885.round(2) ->1.23


`ls` - исполняемая строка (ls выведет список файлов в папаке)
%x[ls] - тоже иполняемая строка
here-документ str=HERE<< ... HERE , HERE<< пишеться вплотную
разбть строку с одинарными кавычками '...'\'...'\'...'
разбть строку с двойными кавычками   "......\......"
%q и %Q вместо одинарных и двойных кавычек %q{...}, %Q[...] (ограничители любые)
?A или ?\u20AC вернёт символ
str='a'  str<<' '<<'b' -> 'a b'
str[0]=?a 
str.chomp! - удаление последнего спецсимвола у строки str.chomp(..), явное указание последних символов для удаления или str=str.chomp
str.capitalize! -первая буква в верхний регистр
str.strip! - обрезать пробелы и спецсимволы
str.reverse -перевернуть строку
str*3 повторить три раза
str.upcase в верхний регистр
str.downcase в нижний регстр
str.char строку в массив
srt.split (',') строку в массив
str.intern
str.include? ('') включён ли? bool "hello" ли "lo"
str.each_char - посимвольная обработка
str.each_line - построчная обработка
str.split(' ').reverse.join(' ') - перевернуть строку

=========================================================
Регулярные выраженя
line=~ /Perl|python/  ицет порвую позицию регулярного выражения
line.sub (/Perl/, 'Ruby') заменит первый Perl на Ruby
line.gsub (/Perl/, 'Ruby') заменит все Perl на Ruby
line.gsub (/Perl|Python/, 'Ruby') заменит все Perl и Python на Ruby
Сntrl+h - роаботает в ide
http://rubular.com/
-------------------------------------------------------
[abc]	A single character of: a, b, or c
[^abc]	Any single character except: a, b, or c
[a-z]	Any single character in the range a-z
[a-zA-Z]	Any single character in the range a-z or A-Z
^	Start of line
$	End of line
\A	Start of string
\z	End of string
-------------------------------------------------------
.	Any single character
\s	Any whitespace character
\S	Any non-whitespace character
\d	Any digit
\D	Any non-digit
\w	Any word character (letter, number, underscore)
\W	Any non-word character
\b	границы слова
-----------------------------------------------------
(...)	Capture everything enclosed
(a|b)	a or b
a?	Zero or one of a
a*	Zero or more of a
a+	One or more of a
a{3}	Exactly 3 of a
a{3,}	3 or more of a
a{3,6}	Between 3 and 6 of a
---------------------------------------------------
options: 
i case insensitive 
m make dot match newlines 
x ignore whitespace in regex 
o perform #{...} substitutions only once
============================================================


obj==nil или obj.nil? - nil отсутствие значения
obj.equal? obj сравнение обьектов по id_memory
obj.eql? строгое сравнение
obj.respond_to? :each - есть ли у обьекта метод each
obj.object_id - __id__ синоним
obj.class  имя класа
obj.class.superclass  суперкласса
obj.class.superclass  итд
obj.class.superclass.superclass
obj.instanse_of? String   проверка bool
obj.is_a? проверка подкласса 
obj.clone копирование с freeze и taint
obj.dup копирование с taint
obj.freeze- заморозка
obj.frozen? - заморожен ли?
obj.taint - пометка небезовасеости, к gets и пришлым по умолчанию
obj.tainted? -помечен ли как не безопасный
obj.untaint! - cнять метку не безопасности

empty=Array.new -[] пустой массив
nil=Array.new - [nil, nil, nil]
zeros=Array.new(4,0) - [0,0,0,0]
copy=Array.new(nil) -[nil, nil, nil]
count=Array.new(3) {|i| i+1} - [1,2,3]
[x+y,x-y,x*y] и так можно
arr=("A".."Z").to_a - массив букв
arr.uniq не повторять элементы
arr.delete_at 0 удаление по номеру
arr.delete "value" удаление по значению
arr.delete_if {|x| value < n} удаление при условии
arr.inspect вывести все элементы
arr.each do |x|  ___ end
arr.each_index {|x| puts x, "---"} # a--,b--
arr.each_with_index do |item, i| 
	puts "#{i+1} - #{item}"
end
arr.length || arr.size колчество элементов
arr.pop   удалить с конца
arr.push  добавить в конец
arr.unshift  удалить в начале
arr.shift    добвить в начале
arr.clear
arr.compact!
arr.empty?
arr.fill
arr.flatten!
arr.include?
arr.index
arr.join
arr.reverse
arr.reverse_each
arr.rindex
arr.sort
arr.sort!


hash.each do |key,value|  ___ end
hash.keys  перечисление ключей
hash.values перечисление значений
hash.each_keys do |key| ___end 
hash.each_value do |value| ___end 
hash.has_key? 'cat'  есть ли ключь? bool
hash.has_value? ''  есть ли значение
hash.push ('','') или hash.store() добавить пару в конец
hash.clear очистить кеш
hash.delete 'key' удаляет только пару
hash.ecl? - тоже == , проверяет ключи на равенство
hash.freeze
hash.rehash



СПЕЦСМВОЛЫ
\n - new line,line feed,lf на новую строку
\t - табуляция, выравнивание строк.tab
\r - return, carege return, cr - в начало строки
\\ -экранирование
\a - звуковой сигнал
\v - вертикальная табуляция
\u - "\u{номер спецсимвола юникода}" "\u{A%}"

СИНТАКСИС
1_000_000 запись 1000000
"...#{x}.."- интерполяция , вывод приведёной строки без переносов
x.times {|i| puts ... #{i}} вывод от 0 до x - повторть х раз
x.upto(y)  и x.downto(y) - повторить от и до
____ do ____end альтернатива блоку {...}
проверка1? and not проверка2?
if a==1 && b!=2 && c<=0 && g>=7 ______end
if___elsif___elsif___else___end
puts '' if ...? или hash['key']=value if ...?  условие bool
if x<10 then
	x=x-1
end
minimum=if x<y then x else y
"...%d ...%s.."%[3,'ruby'] - форматирование
max=x>y ? x :y - условный оператор
case namecase___when____when____else____end

while true ____end цикл, пока истоно делать
Loop do _____ end цикл, тоже что и while true__end

define name_metod (arg)______end функция, подпрограмма, метод, процедура
yiald - вызов функции из функции 
return в конце можно не писать. по умолч ruby выводит последнее выражение в методе
@var глобальная переменная, в коде  везде с собакой, в том числев методах
:var символ-sumbol , в отличии от записи "var", имеют один и тот же id в памяти, для оптимизации
array=[] создать массив array=Array.new
array=%w{} создать массив со СТРОКАМИ, скобки любые
array << добавить в конец массива
arr[range][i] сформировать из массива и выести елемент из нового массива
[[  ],[  ], ...] масив в массиве 
arr.each { |x| puts x[0]} доступ к элементу массива в массиве

hash- Hash Dictiory - key value storage- ключ значение в ячейке
=> - hash rocket -хеш рокета 
hash={key => value, key1 => value1 } скобки важны   hash=Hasn.new
hash={ nama : 'Vasya'}  то же что и hash={ name : => 'Vasya'}
puts hash[key] обращение к value хеша
hash[new_key]= value  добавить в хеш
hash[key]= new_value изменить значение
if hash['cat']___end  то же hash.has_key? 'cat' 
puts hash или hash.inspect
puts hash.key или hash.key.inspect с value аналогично
if hash.has_key? 'key'{} или hash.key? или hash[]  всё bool
def fun111 options ... end , где options=Hash.new c литералами , вызов fun111 :key=>key,:value=>value
	проядок не важен, можно def fun111 hash,var, options но options идёт последней
hash=hash1.merge hash2 создаст новый hash, hash1 и hash2 не изменятся
hash1.merge! hash2  изменит hash1
class A 
	attr_reader:var - чтение переменной вне класа
	attr_accessor:var2 - чтение и запись вне класса
	attr_writer - запись из вне
	def intialize -конструктор
		@var=...
	end
	def foo option ...
end
instance=A.new -создать эземпляр класса
instance.method :key=>key,.. - обратиться к методу класса
puts "...#{A.var}..." -вызвато переменныю класса,из attr
class Dog < Animal -дочерний от
	def initialize
		super('') - передача значений в конструктор суперкласса
	end
end
pablic ниже методы доступные внутри и за пределами класса (по умолчанию)
private ниже методы доступные в классе и дочерних класах
protected ниже методы доступные только в классе
class Name
	def self.name_method  - статический метод, для обращению к методу без создания обьекта
	...
Name.name_method - обращение к статическому методу
yield - вызов блока изнутри и/или передача параметров
lambda - указатель на функцию
x=lambda {..|par|...} или x=lambda do |par| ...end
x.call(par) вызов lambda
module тоже что и namespace 
module Module
	class Class....
obj=Module::Class.new обращение к методу класса в модуле 
obj.method_class   обращение к методу класса в модуле 
is_something? ... если название метода начинается с is , заканчивается с ? то и вызывать с ?

БИБЛИОТЕКИ 
gem библиотека для ruby
NET::HTTP
1. получить и вывести веб-страницу на экран
2. передать постом данные
ActiveRecord гем для рабщты с базами данных

UNIX команды
grep фильтр по регулярному выражению
>ruby file.rb | grep искомая_строка - каманда возвратит фразу с искомым
wget или wget --no-check-configurate ссылка, скачивает файл по адресу содержания на github


РЕДАКТОРЫ и настойка WIN
soblaine фишка/ добавить в PATH путь до папки с soblaine, в папке создать s.exe
вызов в командной строке (far) s app.rb
Ctrl+f поиск на странице браузера
\ для переноса длинний строки
# однострочный комментарий
=begin втроенный документ (ri rdoc) 
		=end
_END_ конец кода и начало данныж
ruby read file site: stackoverflow.com - поиск пример
Fidler прога отслеживания запросов
ifc http справка по протоколам
GOW прога для команд юникса по win
DevKit установка и настройка:
1. ruby dk.rb init
2. config.ymd пропсать путь до папки с ruby
3. ruby dk.rb install
Настройка сертификатов под WIN:
с cort.haxx.se/ca/ скачать carent.pem в папку с ruby
добавить в сист меременные SSL_CERT_FILE = C;/ruby../carent.pem
>node выов njdejs , выйти .exit
npm i npm@latest -g  обновить npm
npm instal -g ungit установить глобально
start ungit запуск в ком строке
touch README.txt - создать файл
echo "something..." >README.txt - добавить запись в файл
>s и навести на крошки Cntr+Enter открыть папку в редакторе



SINATRA
=================================================
gem install sinatra
localhost:4567
рабочая среда: sublime, ungit, localhost:4567, start ruby aap.rb
Cоздать папку view, создать index.erb(файл с видами HTML)
В каталоге поекта создать file.rb запустить сервер ruby file.rb
в file.rb:
require "sinatra"
get "/" do; erb :index; end - путь к виду, "/"- в корневом каталоге
post "/" do; @login= params[ :params];end - получить из формы params[ - впритык]
Важно , после изменений перезапуск сервера, выйти Ctrl+C
public папка для данных в sinatre , ложить документы, папки со стилями и пр
bootstrap for sinatra  устанавливают с GitHub c помощью gem  папку с проетом
bundle exec ruby app.rb забуск bootstrap-sinatra из консоли
gem install sinatra-reloader  прога обновления в браузере приразработке
в app.rb дописать require "sinatra/reloader"
и start ruby app.rb для запуска отдельно от far
====================================================
gem pony for sinatra? gem install pony, нуженн файл pony.rb  с github
require " ... pony.rb", порты 587, 485, 25, 2525
одрес ящика сервера без нижних подчёркиваний
подключение базы данных sqlite3:
require "sqlite3"
configure do
 db=SQLite3::Database.new 'db.sqlite'
 db.execute CREATE TABLE IF NOT EXISTS 
	`visit` (
						`id`	INTEGER PRIMARY KEY AUTOINCREMENT,
						`name`	VARCHAR,
						`pfone`	VARCHAR,
						`date_time`	VARCHAR,
						`master`	VARCHAR,
						`color`	VARCHAR
					)"
end
=====================================
db.execute "запрос к базе"
db.close
Пример хака через инкапсуляцию ' DROP TABLE cars --'
configure do ... end функция sinatra вызывается один раз при изменении приложения
before do ...end  функция выполняет код перед каждым запросом get или post
db.result_as_hash=true флажок для вывода БД в виде хеша
redirect to "/" перенаправить
get 'link/:link' do - на лету создаёт страницу
	link= params[:link] - извлекает параметр з URL
end
======================================================
Подключение и запуск ActiveRecord :
Шаги миграции (gems,Rakefile):
1.set :database....
2. class ...
3. rake db.create_migration .....
4. Редактирование миграции, создание таблиц
5. rake db.migrate
========================================================
1. в Gemfile подкдючть sqlite3, activerecord, sinatra-activerecord,sinatra-contrib,
group :development do; gem 'tux'; end; - подключение гема для разработки 
2. bundle install - для обновления гемов 
3.в основном файле app.rb прописываем.
require "sinatra/activerecord"
set :database, "sqlite3:name_base.db"- подключение (слитно)
4. создать в основной директории Rakefile, и прописать в нём
require "./app"
require "sinatra/activerecord/rake"
5.Создание сущностей


tux- консоль для acniverecord:
tux  запуск  exit выход
Client.all - просмотр сущностей
Client.count - поссчитать записи
c=Client.new -пустой обьект
c.valid? - bool
c.errors.count
c.errors.full_messages.first

Команды Rake:
rake -T - список параметров , команд
rake db.create_migration NAME=name_of_migration - создать новую миграцию
rake db.migrate - применяет созданную миграцию
rake db.rollback - возврат к предыдущей миграции


ActiveRecord
ORM - Object Relitional Mapping
(sqlite ...db, .table, .mode column, .headers on, select * from Clients- работа с БД)
class Clients<ActiveRecord::Base;end; - создане сущности (унаследует методы), после выполненя
миграци появться директоря и файл , далее rake команда создания мграции
Класс в единственном числе, а таблицы во множественном!!!
sinatra пример:
rake db.create_migration NAME=create_clients, генерирует папку db  с файлом  2344.create_clients.rb ,
 в это м файле класс CreateClients с методом 
 def cenge
 	create_table :clients do |t|
 		t.text :name  - поле типа текст
 		t.string :pfone  - поле типа varchar(255)
 		t.timestamps - сгенерирует строки create_at и upduted_aat
 	end
 		Сlient.create :name => "Bob" - внесение данных при создании
end
для  выполнения запустить миграцию rake db.migrate
Cоздание запсей:
Сlient.create :name => "Bob" - создаст сразу
b=Client.new :name => "Bob" - создаст в буфере
b.new_record? - boll есть ли в памяти
b.save - сохранение в памяти
=================================================
Сохранение данных:
в input параметр name="client[name]"....
в app с= Client.new params[:client] ; c.save
save по умолчанию выполняет валидацию
=================================================
Валидация данных
в class Client пишем validate :name, presence: true (par1 по таблицк, par2 это hash)
полный список хелперов валидации в справке activerecord
======================================================
Доступ к обьекту в таблице
@master=Master.find(params[:id])
++++++++++++++++++++++++++++++++++++
tables.find(10) то же select * from tables where id=10
======================================================
Вывод данных из таблиц
1.  в app.rb
	@clients=Client.all (можно проверить в tux)
	@clients=Client.order "created_at DESC" - в обратном порядке
2. на странице вида
  <% @clients.each do |m| %>
  	<%= m.name %>
  <% end %>



SQLite3 база данных
sqlite.com файлы для установки 
db.execute "INSERT INTO cars (model,price) VALUES (?,?)",[par1,par2]
sqlites db.sqlite -вызов базы в консоли
запрос в формате SQL завершается ";"
SELECT * FROM namedb;
INSERT INTO namedb (name,price) VALUES ('sugar',3)
CREATE IF NOT EXISTS, DROP IF NOT EXISTS
.tables список таблиз
.exit выйти
.mode column улучшеное отображение
.header on- показывать шапку
.show - текущие настройки
.database - названия баз и файлов
.schema - отоброжает структуру таблицы
.dump - создать копию базы данных в текстовом документе
INSERT INTO post (name, data)VALUES ("text", datetime()) - текущее время






