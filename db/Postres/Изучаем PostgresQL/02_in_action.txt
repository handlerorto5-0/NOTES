Глава 2 PostgresSQL в действии стр47
Для OLTP-приложений достаточно PostgreSQL в стандартной комплектации. А для поддержки OLAP имеется много расширений и инструментов, в т. ч. адаптеры внешних данных (foreign data wrappers – FDW), секционирование таблиц, а в последних версиях еще и параллельное выполнение запросов.
От PostgreSQL существует более 20 ответвлений:
- HadoopDB – гибрид PostgreSQL с технологиями MapReduce, ориентированный на аналитику.
- Greenplum используется архитектура без разделения ресурсов с массово параллельной обработкой (MPP). Применяется для создания хранилищ данных и аналитики.
- EnterpriseDB Advanced Server – коммерческая СУБД, дополняющая PostgreSQL средствами Oracle
- Postgres-XC (eXtensible Cluster) – кластер на основе PostgreSQL с несколькими ведущими узлами, построенный на базе архитектуры без разделения ресурсов
- Vertica – столбцовая база данных, заимствовала у PostgreSQL синтаксический анализатор SQL, семантический анализатор и стандартные методы переписывания SQL-запросов
- Netezza – хранилище данных
- Amazon Redshift – хранилище данных

Все компоненты PostgreSQL, включая регистратор, планировщик, анализатор статистики и диспетчер памяти, допускают конфигурирование.
В PostgreSQL изначально встроена потоковая репликация типа ведущий-ведомый, основанная на трансляции файлов журналов. Принцип заключается в том, чтобы сначала сделать снимок ведущего узла, а затем доставлять изменения – WAL-файлы – с ведущего узла на ведомый, где они воспроизводятся. На ведущем узле можно выполнять операции чтения и записи, а на ведомом только операции чтения. В синхронном режиме операция модификации данных должна быть зафиксирована на всех серверах, и только тогда она считается успешной. В каскадном режиме ведомый узел является ведущим для другой реплики. Логическая репликация, при которой двоичные данные копируются побитово.

Механизм расширений позволяет определять новые типы данных. www.pgxn.org
пример как создать новый составной тип стр55
Чтобы найти в нем строки, относящиеся к одно-
ранговой аутентификации
PostgreSQL предоставляет шесть типов индексов: B-дерево, хеш, обобщенный инвертированный индекс (GIN), обобщенное дерево поиска (GiST), SP-GiST и индекс блочных диапазонов (Block Range Index – BRIN) 

- explain показывает план выполнения SQL-команды
- analyze служит для сбора статистики по таблицам и столбцам
- vacuum применяется для сборки мусора и возврата неиспользуемого дискового пространства операционной системе
- cluster физически организует данные на диске

---------------------------------------------------------------------------------------
Установка:
https://www.PostgreSQL.org/download/ выложены дистрибутивы для наиболее распространенных платформ
настроить apt-репозиторий PostgreSQL:
$ sudo sh -c 'echo "deb http://apt.PostgreSQL.org/pub/repos/apt/
$ (lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
$ wget --quiet -O - https://www.PostgreSQL.org/media/keys/ACCC4CF8.asc |  sudo apt-key add -
$ sudo apt-get update
$ sudo apt-get upgrade
Установка клиентов:
sudo apt-get install PostgreSQL-client-13
какие программы были установлены:
ls /usr/lib/postgresql/13/bin/
установить pgAdmin cтр 61
Установка сервера:
$sudo apt-get install PostgreSQL-10
Для проверки корректности установки:
$ pgrep -a postgres
------------------------------------------------------------
Базовая конфигурация сервера:
В процессе установки сервера создается новый пользователь операционнойсистемы и пользователь базы данных с именем postgres.
Аутентификация клиента управляется конфигурационным файлом pg_hba.conf. Чтобы найти в нем строки, относящиеся к одно-
ранговой аутентификации:
grep -v '^#' /etc/postgresql/13/main/pg_hba.conf | grep 'peer'
Чтобы подключиться к серверу базы данных от имени пользователя postgres:
$ sudo -u postgres psql
параметры соединения:
-d: имя базы данных
-h: имя или IP-адрес узла
u: им пользователя
-p: номер порта
------------------------------------------------------------
Клиент psql

как использовать редактор nano для редактирования функции:
postgres=# \setenv PSQL_EDITOR /bin/nano
postgres=# \ef
В файле .psqlrc можно сохранить настройки.
можно создавать сокращение частых запросов:
postgres=# \set activity 'SELECT pid, query, backend_type, state FROM pg_stat_activity';
postgres=# :activity;











