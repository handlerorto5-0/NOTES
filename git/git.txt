gitecho "# datacenter" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin git@github.com:academind-345590/datacenter.git
git push -u origin master
============================================================================
откатиться к последнему кдммиту
git add .
git reset --hard
==========================================================================
только если совсем все испортили в рабочей ветке
git checkout -btopic-branch
<действительно все испортили>
git add -A
git commit -a -m "Major screw up"
git checkout master
git branch -D topic-branch
===========================================================================
touch .gitignore
sudo nano .gitignore - открыть в текстовом редакторе
# dependencies
/node_modules
===========================================================================
git init - инициализируйте новый репозиторий
git add <файл>…», чтобы добавить в то, что будет включено в коммит
git add -A  - добавит все файлы из текущего каталога,
 кроме тех, что соответствуют шаблонам (правилам) в специальном файле .gitignore
git status -состояние
git commit -m "Initialize repository" - комент
git log - список фиксаций
git remote add origin git@bitbuc...git - подключение к удалёному дупозитарию
git push -u origin --all   - отправляет репозиторий в первый раз
git push -u origin master
git checkout -b <имя-новой-ветки>
git branch - список веток
git mv файл_старый файл_новый - замена файла
git commit -a -m " замена файла" - -а фиксация после замены файла
git checkout master- перейти в ветку (перед слияниеи)
git merge имя_ветки  - слияние
git branch -d имя-ветки  - удаление ветки
git branch -D имя_веткм -вообще отказаться от изменений в рабочей ветви, если всё плохо
git push- отправка
===============================================================================
ТЕГИ
git tag  Вывод списка тегов
git tag -a v1.4 -m 'my version 1.4'   Создать в Git тег, снабженный комментарием
git show v1.4   просмотра данных тега
================================================================================
Псевдонимы
git config --global alias.unstage 'reset HEAD --'
===================================================================================
Ветвления
git branch testing
git log --oneline --decorate  Узнать, куда именно нацелены указатели веток
git checkout testing  Переход на существующую ветку
git log --oneline --decorate --graph --all   выводит историю коммитов, показывая места расположения указателей и точки расхождения

git checkout -b hotfix  Создать ветку и сразу перейти туда
git checkout master
git merge hotfix  объединить ветку hotfix с веткой master
git branch -d hotfix  удалить ветку hotfix
===================================================================================
git branch  список имеющихся веток
git branch -v  Последний коммит, выполненный в каждой ветке
git branch --merged  просмотра веток, объединенных с текущей веткой
git branch --no-merged  Просмотр списка веток, данные которых еще не слиты в другие ветки
===================================================================================
Перемещение данных
git checkout experiment
git rebase master  взять изменения, зафиксированные в одной ветке, и повторить их в другой
=====================================================================================
Правильное слияние, на выходе последовательные комиты -git flow
git checkout name_brandh
git rebase name_brandh
git checkout master
git merge name_branch
git rebase master
=====================================================================================







