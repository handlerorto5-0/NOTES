отмонтировать внешний репозиторий
git remote remove origin

Отменить Все Незакоммиченные Изменения
Уберите из индексации все файлы и директории
git reset --hard HEAD
Просмотреть, а затем удалить
git clean -nd
git clean -fd
Просмотреть, а затем удалить ВСЕ непроиндексированные файлы и папки, включая игнорируемы Git-ом:
git clean -ndx
git clean -fdx

верхушка текущей ветки позади ее внешней части
Поставьте все неустановленные изменения.
git add .  
Спрятать изменения.
git stash save
Синхронизация с пультом.
git pull -r
Повторно примените локальные изменения.
git stash pop


машина времени:
git reflog
# Тут вы увидите всё, что вы делали
# в Git во всех ветках.
# У каждого элемента есть индекс HEAD@{index}.
# Найдите тот, после которого всё сломалось.
git reset HEAD@{index}
# Машина времени к вашим услугам.

переделать последний комит после запоздалого изменения(например в .gitignore) до push
git add .gitignore
git rm -r public/uploads/ticket/attachment/
git commit --amend --reuse-message HEAD

коммит поправить:
# Внесите изменения
git add . # или добавьте файлы по отдельности.
git commit --amend --no-edit
# Теперь последний коммит содержит ваши изменения.
# ВНИМАНИЕ! Никогда не изменяйте опубликованные коммиты.

изменить сообщение последнего коммита:
git commit --amend
# Открывает редактор сообщений коммита.

закоммитил что-то в мастер, хотя должен был в новую ветку:
# Эта команда создаст новую ветку из текущего состояния мастера.
git branch some-new-branch-name
# А эта — удалит последний коммит из мастер-ветки.
git reset HEAD~ --hard
git checkout some-new-branch-name
# Теперь ваш коммит полностью независим :)

закоммитил не в ту ветку:
# Отменяет последний коммит, но оставляет изменения доступными.
git reset HEAD~ --soft
git stash
# Переключаемся на нужную ветку.
git checkout name-of-the-correct-branch
git stash pop
# Добавьте конкретные файл или не парьтесь и закиньте все сразу.
git add .
git commit -m «Тут будет ваше сообщение»
# Теперь ваши изменения в нужной ветке.
or  использовать cherry-pick
git checkout name-of-the-correct-branch
# Берём последний коммит из мастера.
git cherry-pick master
# Удаляем его из мастера.
git checkout master
git reset HEAD~ --hard

изменения были внесены, но diff пуст:
git diff --staged

отменить коммит, который был сделан 5 коммитов назад:
# Найдите коммит, который нужно отменить.
git log
# Можно использовать стрелочки, чтобы прокручивать список вверх и вниз.
# Сохраните хэш нужного коммита.
git revert  [тот хэш]
# Git создаст новый коммит, отменяющий выбранный.
# Отредактируйте сообщение коммита или просто сохраните его.

отменить изменения в файле:
# Найдите хэш коммита, до которого нужно откатиться.
git log
# Сохраните хэш нужного коммита.
git checkout [тот хэш] --path/to/file
# Теперь в индексе окажется старая версия файла.
git commit -m «О май гадбл, вы даже не использовали копипаст»

Давай по новой, Миша, всё х**ня:
cd ..
sudo rm -r fucking-git-repo-dir
git clone https://some.github.url/fucking-git-repo-dir.git
cd fucking-git-repo-di

полностью откатиться до исходной версии
# Получить последнее состояние origin.
git fetch origin
git checkout master
git reset --hard origin/master
# Удалить неиндексированные файлы и папки.
git clean -d --force
# Повторить checkout/reset/clean для каждой испорченной ветки.


<%= link_to "Sign-Out", destroy_user_session_path, method: :delete %>

