процесс, независимый компонент (построенный на функциях), который посылает
и принимает сообщения
Интерактивная оболочка – это процесс

идентификатор процесса (process identifier, или pid)
self() 
Каждый процесс получает собственный идентификатор, и эти идентификаторы действуют подобно почтовым адресам.

Синтаксис отправки сообщений send/2
send(self(), :test1) посылает интерактивной оболочке сообщение, содержащее атом :test1
pid = self()
send(pid, :test2)

flush(), можно использовать для просмотра содержимого почтового ящика, но она при этом удаляет эти сообщения
правильный способ чтения почтового ящика:
send(self(), :test1)
receive do
	x -> x
end
-------------------------------------------------------
Порождение процессов из модулей

defmodule Bounce do
	def report do
		receive do
			msg -> IO.puts("Received #{msg}")
		end
	end
end
порождения (запуска) процесса:
pid = spawn(Bounce, :report, [])
потом передать сообщение:
send(pid, :hello)
report завершается – он выполняет инструкцию receive только один раз
тобы заставить процесс продолжать принимать и обрабатывать сообщения, нужно добавить рекурсивный вызов
def report do
	receive do
		msg -> IO.puts("Received #{msg}")
	report()
end
или со счетсиком и передачей состояний
def report(count) do
	new_count = receive do
		msg -> IO.puts("Received #{count}: #{msg}")
		count + 1
	end
report(new_count)
spawn(Bounce, :report, [1])

---------------------------------------------------------
Регистрация процесса, в роли имени процесса необходимо использовать атом:
id1 = spawn(Bounce, :report, [1])
Process.register(pid1, :bounce)
send(:bounce, :hello)
Process.whereis/1 получить pid зарегистрированного процесса
get_bounce = Process.whereis(:bounce)
unregister/1 можно удалить процесс из списка регистрации
Process.unregister(:bounce)


























