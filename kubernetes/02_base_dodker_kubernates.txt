===================================
Создание, запуск и совместное использование образа контейнера

----------------------------------
Установка Docker на Ubuntu 18.04 
http://docs.docker.com/engine/installation/

sudo apt-get update 
sudo apt-get install  apt-transport-https ca-certificates curl gnupg-agent  software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo apt-key fingerprint 0EBFCD88
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
sudo apt update

переключиться из репозитория Ubuntu 18.04 в репозиторий Docker:
apt-cache policy docker-ce

установить Docker:
sudo apt-get install docker-ce docker-ce-cli containerd.io

запросите её состояние:
sudo systemctl status docker
sudo docker run hello-world

добавьте своего пользователя в группу docker:
sudo usermod -aG docker ${USER}
su - ${USER} или выйти из системы и войти
Убедитесь, что пользователь добавлен в группу:
id -nG
добавить в группу docker пользователя
sudo usermod -aG docker username

команды Docker:
docker [option] [command] [arguments]
docker - список команд

---------------------------------------
Docker извлекла из хранилища Docker Hub в http://docker.io
docker run busybox echo "Hello world"

=========================================
Пример сщздания обрза:
создали файл с прогой node_app.js
в той папке создать Dockerfile , с:
FROM node:7 - образ контейнера с тегом
ADD node_app.js /node_app.js - добовить в образ
ENTRYPOINT ["node", "node_app.js"] - определяет какой командой запускать(node node_app.js)

поручаете Doc­ker создать образ с именем kubia на основе содержимого текущего каталога
docker build -t kubia .
список:
docker images
запустить:
docker run --name kubia-container -p 8080:8080 -d kubia
Она поручает платформе Docker запустить новый контейнер с именем kubia-container из образа kubia . Контейнер будет отсоединен от консоли (флаг -d ), имея в виду, что он будет работать в фоновом режиме. Порт 8080 на локальной машине будет увязан с портом 8080 внутри контейнера (параметр - p 8080:8080 ), так что вы можете получить доступ к приложению через http://localhost:8080 .

curl localhost:8080
docker ps
docker inspect kubia-container

Исследование работающего контейнера изнутри
Запуск оболочки внутри существующего контейнера
docker exec -it kub-container bash
Вывод списка процессов внутри контейнера
ps aux
Процессы контейнера, работающие в хостовой ОС
ps aux | grep app.js
Контейнер имеет собственную полную файловую систему
ls /
выйти из контейнера
exit

Остановка и удаление контейнера
docker stop kubia-container
docker ps -a
удалить контейнер
docker rm kubia-container

================================
Отправка образа в хранилище образов
Docker Hub ( http://hub.docker.com ), Quay.io, Google Container Registry

http://hub.docker.com  id: exckv2

Тегирование образа дополнительным тегом
docker tag kubia exckv2/kubia
docker images | head

Передача образа в хранилище docker hub
docker login
docker push exckv2/kubia

Запуск образа на другой машине
docker run -p 8080:8080 -d exckv2/kubia

======================================
Настройка кластера Kubernetes
список методов установки кластера Kubernetes
http://kubernetes.io
---------------------------------------------
Oдно­узловой кластер Kubernetes на локальной машине с помощью minikube

установка http://github.com/kubernetes/minikube
sudo apt-get update -y
sudo apt-get upgrade -y
sudo apt-get install curl
sudo apt-get install apt-transport-https
Install VirtualBox Hypervisor
sudo apt install virtualbox virtualbox-ext-pack
Install Minikube
wget https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
sudo cp minikube-linux-amd64 /usr/local/bin/minikube
sudo chmod 755 /usr/local/bin/minikube
minikube version
Управление Minikube
minikube start (после перезагрузки bios virtualization enable)
minikube pause
minikube stop
minikube config set memory 16384
minikube addons list
minikube start -p aged --kubernetes-version=v1.16.1
minikube delete --all
Установка клиента kubernetes (kubectl)
curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
chmod +x ./kubectl
sudo mv ./kubectl /usr/local/bin/kubectl
kubectl version -o json

Проверка работы кластера и обмена информацией с kubectl
kubectl config view
kubectl cluster-info

Вывод списка узлов кластера с помощью kubectl
kubectl get nodes
kubectl describe node gke-kubia-85f6-node-0rrx

Создание псевдонима
в файл ~/.bashrc
alias k=kubectl

простой способ развертывания приложения
kubectl create deployment kub --image=exckv2/kubia (--generator=run/v1)
--> deployment.apps/kub created
kubectl get pod kub

Модуль (pod) – это группа, состоящая из одного или нескольких тесно связанных контейнеров, которые всегда будут выполняться вместе на одном рабочем узле и в одном пространстве имен Linux. Каждый модуль подобен отдельной логической машине с собственным IP-адресом, сетевым именем, процессами и т. д., выполняющей одно приложение.

Вывод списка модулей
kubectl get pods

----------------------------
Доступ к веб-приложению

При создании службы с типом LoadBalancer будет создана внешняя подсистема балансировки нагрузки, и вы сможете подключаться к модулю через общедоступный IP-адрес подсистемы балансировки нагрузки.

Создание объекта Service
kubectl expose deployment kub --type=LoadBalancer --port=8080  --name kub-http (--generator=run/v1)
--> service/kub-http exposed
minikube tunnel

Вывод списка служб
kubectl get svc kubia-http
kubectl get services

Доступ к службе через внешний IP-адрес
curl 10.96.28.205:8080  ( where 10.96.28.205 - EXTERNAL-IP)
если исп minikube
minikube service kub-http --url








