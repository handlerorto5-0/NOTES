конструкции для оценки условий внутри функций: case, cond и if
-------------------------------------------------------------
Конструкция case дает возможность выполнить сопоставление с образцом внутри функции
def fall_velocity(planemo,
	case planemo do или gravity = case planemo do
		:earth -> :math.sqrt(2* 9.8 * distance)
	end
end
------------------------------------------------------------
Конструкция cond  схожа с инструкцией case, но она не использует сопоставление с образцом. Может содержать условие, выполняющееся при любых обстоятельствах, –
выражение в конце, возвращающее true
cond do или description = cond do
velocity >= 5 and velocity < 10 -> :fast
end
------------------------------------------------------------
if проверяет только одно условие, и позволяет использовать else вслед за
ней, если в случае невыполнения условия также требуется выполнить какие-то действия
if velocity > 20 do
	IO.puts("Look out below!")
else
	IO.puts("Reasonable...")
end

if x>10 do :large else :small end
if x>10, do: :large, else: :small
unless x>10, do: :small, else: :large
------------------------------------------------------------
побочный эффект:
IO.puts("Look out below!") добавляет символ перевода строки в конец
IO.write  без символа перевода строки в конце
IO.inspect вывести значение переменной, не являющееся строкой
------------------------------------------------------------
Простая рекурсия
рекурсия: функция, которая вызывает саму себя

Обратный отчёт:
def countdown(from) when from > 0 do
	IO.inspect(from)
	countdown(from-1)
end

Прямой отчёт:
defp countup(count, limit) when count <= limit do
	IO.inspect(count)
	countup(count+1, limit)
end
-------------------------------------------------------
Рекурсия с возвратом значения
Факториал – это произведение всех положительных чисел, равных или меньше аргумента
def factorial(n) when n > 1 do
	n * factorial(n - 1)
end
def factorial(n) when n <= 1 do
	1
end

