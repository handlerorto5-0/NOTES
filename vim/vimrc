":wq
" Reload .vimrc and :PlugInstall to install plugins and :q
call plug#begin('~/.vim/plugged')

Plug 'ycm-core/YouCompleteMe'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-dispatch'
" On-demand loading
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
"colorThemes
Plug 'morhetz/gruvbox'
"rails
Plug 'tpope/vim-rails'
" ruby
Plug 'vim-ruby/vim-ruby'
"end ruby def
Plug 'tpope/vim-endwise'
" Emmet: inter html:5_and press <c-y>,
Plug 'mattn/emmet-vim'
let g:user_emmet_install_global = 0
autocmd FileType html,css,eruby,xml EmmetInstall
" quickly move cursor, try <Leader>pattern
Plug 'easymotion/vim-easymotion'
"insert or delete brackets, parens, quotes in pair.
Plug 'jiangmiao/auto-pairs'
"gcc to comment out a line
Plug 'tpope/vim-commentary'
"Another JavaScript Syntax file for Vimcall
Plug 'othree/yajs.vim'
" for proper JSX support
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
let g:jsx_ext_required = 1
"Linting
Plug 'dense-analysis/ale'
let g:ale_linters = {
\   'ruby': ['standardrb', 'rubocop'],
\   'python': ['flake8', 'pylint'],
\   'javascript': ['eslint'],
\   'vue': ['eslint']
\}
let g:ale_fixers = {
  \    'ruby': ['standardrb'],
  \    'javascript': ['eslint'],
  \    'typescript': ['prettier', 'tslint'],
  \    'vue': ['eslint'],
  \    'scss': ['prettier'],
  \    'html': ['prettier'],
  \    'reason': ['refmt']
\}
let g:ale_fix_on_save = 1
nnoremap ]r :ALENextWrap<CR>     " move to the next ALE warning / error
nnoremap [r :ALEPreviousWrap<CR> " move to the previous ALE warning / error
" to ruby err
function! LinterStatus() abort
  let l:counts = ale#statusline#Count(bufnr(''))

  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors

  return l:counts.total == 0 ? '‚ú® all good ‚ú®' : printf(
        \   'üòû %dW %dE',
        \   all_non_errors,
        \   all_errors
        \)
endfunction
set statusline=
set statusline+=%m
set statusline+=\ %f
set statusline+=%=
set statusline+=\ %{LinterStatus()}

" deoplete.nvim
if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif
Plug 'Shougo/neosnippet.vim'
Plug 'Shougo/neosnippet-snippets'
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)
let g:deoplete#enable_at_startup = 1
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ deoplete#mappings#manual_complete()
function! s:check_back_space() abort "{{{
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction"}}}

"Language Server
Plug 'autozimu/LanguageClient-neovim', {
    \ 'branch': 'next',
    \ 'do': 'bash install.sh',
    \}
let g:LanguageClient_serverCommands = {
    \ 'javascript': ['javascript-typescript-stdio'],
    \ 'ruby': ['~/.rbenv/shims/solargraph', 'stdio'],
    \}
nnoremap <leader>l :call LanguageClient_contextMenu()<CR>
nnoremap K :call LanguageClient#textDocument_hover()<CR>
nnoremap gd :call LanguageClient#textDocument_definition()<CR>
nnoremap <leader>r :call LanguageClient#textDocument_rename()<CR>


call plug#end()

"sets
syntax on
colorscheme gruvbox
set background=dark

" –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–æ–±–µ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∑–∞–º–µ–Ω—è—Ç—å \t
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
set et            " –∞–≤—Ç–æ–∑–∞–º–µ–Ωa –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
set wrap          " –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
set ai            " –∞–≤—Ç–æ–æ—Ç—Å—Ç—É–ø—ã –¥–ª—è –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫
set cin           " –æ—Ç—Å—Ç—É–ø—ã –≤ —Å—Ç–∏–ª–µ –°–∏
" –ø–æ–∏—Å–∫ –∏ –ø–æ–¥—Å–≤–µ—Ç–∫a —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å–∫–æ–±–æ–∫
set showmatch
set hlsearch      " to search string :/pattern n-next
set incsearch
set ignorecase
" —Ç–∞–±—ã –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ —Ç–æ—á–∫–∞–º–∏
set listchars=tab:¬∑¬∑
set list
" –ó–∞–Ω—è—Ç—å –æ–∫–Ω–æ–º —Å vim –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±–æ–ª—å—à–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
"if has("gui_running")
"set shell=/bin/bash
set ruler            " Show file stats
au GUIEnter * :set lines=99999 columns=99999
"endif

set visualbell       " Blink cursor on error instead of beeping (grr)
set encoding=utf-8   " Encoding
set splitbelow       " :split –≤–Ω–∏–∑—É
set mousehide        " –ø—Ä—è—á–µ—Ç –∫—É—Ä—Å–æ—Ä –º—ã—à–∏ –≤–æ –≤—Ä–µ–º—è –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
set number           " –Ω—É–º–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–æ–∫
set autowrite        "co—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã :wall
set laststatus=2     "status bar
set wildmenu         " –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–¥ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
set ch=2             " –≤—ã—Å–æ—Ç–∞ –∫–æ–º—Å—Ç—Ä–æ–∫–∏
set statusline=Filename:%t\ Line:\ %l\ Col:\ %c "status line
set lz               " –ª–µ–Ω–∏–≤–∞—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ —ç–∫—Ä–∞–Ω–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤

"end sets

"mappings
let mapleader=',' "set <Leader> key
"open navpanel Ctrl+n
map <C-n> :NERDTreeToggle<CR>
"Search file :FZF -> ECS
" –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º:
" /tocj<CR> –æ—Ç–∫—Ä–æ–µ—Ç –Ω–∞–ø—Ä–∏–º–µ—Ä table-of-contents.js
" /toch<C-v> –æ—Ç–∫—Ä–æ–µ—Ç –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ table-of-contents.hbs –≤ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
nnoremap <C-p> :<C-u>FZF<CR>
"end mappings

" FORMATTERS (npm install -g prettier)
au FileType javascript setlocal formatprg=prettier
au FileType javascript.jsx setlocal formatprg=prettier
au FileType typescript setlocal formatprg=prettier\ --parser\ typescript
au FileType html setlocal formatprg=js-beautify\ --type\ html
au FileType scss setlocal formatprg=prettier\ --parser\ css
au FileType css setlocal formatprg=prettier\ --parser\ css
nnoremap <F5> mzgggqG`z
" end formatters

