commands.txt
===========================
Часто используемые команды Docker: http://docs.docker.com
определить значение флага по умолчанию
$ docker logs --help
---------------------------
docker run
-a, --attach
Подключает заданный поток ( STDOUT и прочие) к терминалу. Если ключ не задан, то подключаются поток вывода stdout и поток ошибок stderr . Если ключ не задан и при этом контейнер запускается в интерактивном режиме ( -i ), то подключается еще и поток ввода stdin. Несовместим с ключом -d .
-d, --detach
Запускает контейнер в режиме «отключения от всех потоков». Команда запус­ кает контейнер в фоновом режиме (background mode) и возвращает идентификатор (ID) контейнера.
-i --interactive
Поддерживает доступность открытого потока stdin (даже если он не был подключен). Используется вместе с ключом -t:
$ docker run -it debian /bin/bash
--restart
Позволяет настроить образ действий при попытке Docker перезапустить остановленный контейнер. Аргумент no запрещает любые попытки перезапуска контейнера. При аргументе always попытки перезапуска выполняются в любом случае вне зависимости от состояния контейнера после выхода. Если задан аргумент on-failure , то попытки перезапуска выполняются для контейнера, завершившего работу с ненулевым статусом. В последнем случае может быть задан дополнительный необязательный аргумент, определяющий максимальное количество попыток перезапуска (если этот аргумент не задан, то попытки будут выполняться бесконечно). Например, команда docker run --restart on-failure:10 postgres запускает контейнер postgres , и если контейнер завершает работу с ненулевым кодом, то выполняются 10 попыток его перезапуска.
--rm
Автоматически удаляет контейнер после завершения сеанса его работы (выхода). Несовместим с ключом -d.
-t, --tty
Создает псевдоустройство TTY (терминал). Как правило, используется вместе с ключом -i для запуска контейнера в интерактивном режиме.
-e, --env
Определяет переменные среды внутри контейнера. Например:
$ docker run -e var1=val -e var2="val 2" debian env
--env-file 
для передачи переменных среды через заданный файл.
-h --hostname
Устанавливает для запускаемого контейнера заданное имя Unix-хоста.
$ docker run -h "myhost" debian hostname
--name NAME
Присваивает контейнеру имя NAME . В дальнейшем это имя может использоваться для обращения к данному контейнеру в других командах Docker.
-v, --volume
Существуют две формы записи этого аргумента для создания и настройки тома (файл или каталог внутри контейнера, являющийся частью файловой системы хоста, а не файловой системы UnionFS контейнера). Первая форма определяет только каталог внутри контейнера, а связываемый с ним каталог хоста выбирает механизм Docker. Вторая форма определяет как внутренний каталог контейнера, так и связываемый с ним каталог хоста.
--volumes-from
Монтирует тома из заданного контейнера. Часто используется при работе с контейнерами данных (см. раздел «Контейнеры данных» выше).
--expose
Аналог инструкции EXPOSE из файла Dockerfile. Определяет номер порта или диапазон номеров портов, предназначенных для использования в контейнере, но в действительности не открывает каких-либо портов. Применение этого ключа имеет смысл только в сочетании с ключом -P , а также при установлении соединений между контейнерами.
--link
Настраивает интерфейс частной закрытой сети для заданного контейнера.
-p --publish
«Публикует» порт данного контейнера, то есть делает его доступным с хоста. Если соответствующий порт хоста не определен, то произвольным образом выбирается свободный порт с большим номером (за пределами диапазона системных портов), который в дальнейшем можно узнать с помощью команды docker port. Также можно определить интерфейс хоста, для которого объявляется данный порт.
-P, --publish-all
Объявляет все порты, открываемые в контейнере, доступными на хосте. Для каждого объявляемого порта произвольным образом выбирается свободный порт с большим номером. Чтобы увидеть установленные соответствия между портами, воспользуйтесь командой docker port.
--entrypoint
Определяет точку входа для запускаемого контейнера в соответствии с заданным
аргументом, заменяя содержимое любой инструкции ENTRYPOINT из Dockerfile.
-u, --user
Определяет пользователя, от имени которого выполняются команды. Может быть задано как символьное имя пользователя или как числовой идентификатор UID. Заменяет содержимое инструкции USER из Dockerfile.
-w, --workdir
Устанавливает рабочий каталог в контейнере в соответствии с заданным путевым именем. Заменяет любые значения, определенные в файле Dockerfile.
---------------------------------
Управление контейнерами
---------------------------------
docker attach [OPTIONS] CONTAINER
Команда attach позволяет пользователю наблюдать или взаимодействовать с основным процессом внутри контейнера. Например:
$ ID=$(docker run -d debian sh -c "while true; do echo 'tick'; sleep 1; done;")
$ docker attach $ID
Ctrl+C
--------------------------------
docker create
Создает контейнер из заданного образа, но не запускает его. Аргументы этой команды в основном те же, что для команды docker run . Чтобы запустить созданный контейнер, нужно выполнить команду docker start.
-------------------------------
docker cp
Позволяет копировать файлы между файловыми системами контейнера
и хоста.
------------------------------
docker exec
Запускает заданную команду внутри контейнера.
------------------------------
docker kill
Посылает сигнал основному процессу (PID=1) в контейнере. По умолчанию посылает сигнал SIGKILL , по которому выполняется немедленное завершение работы контейнера.
------------------------------
docker pause
docker unpause
Временно приостанавливает все процессы внутри заданного контейнера.
-----------------------------
docker restart
Перезапускает один или несколько контейнеров.
-----------------------------
docker rm
Удаляет один или несколько контейнеров. Возвращает имена или идентификаторов успешно удаленных контейнеров. По умолчанию docker rm не удаляет существующие тома. Аргумент -f позволяет удалять работающие контейнеры. С помощью аргумента -v можно удалить тома, созданные удаляемым контейнером.
-----------------------------
docker start
Запускает остановленный контейнер
-----------------------------
docker stop
Останавливает (но не удаляет) один или несколько контейнеров.
-----------------------------
Информация о механизме Docker
-----------------------------
docker info
Выводит различную информацию о системе Docker и хосте, на котором она работает.
docker help
Выводит информацию об использовании и справку по заданной команде. Аналогично выполнению команды с флагом --help .
docker version
Выводит информацию о версии клиента и сервера Docker, а также о версии языка программирования Go, используемого при компиляции.
------------------------------
Информация о контейнере
------------------------------
docker diff
Показывает изменения в файловой системе контейнера по сравнению с файловой системой образа
docker events
Выводит в реальном времени события от демона демону. Для выхода Ctrl-C.
docker inspect
Предоставляет подробную информацию о заданных контейнерах или образах.Аргумент -f используется для определения шаблонов языка Go при форматировании и фильтрации вывода.
docker logs
Выводит журналы (logs) для контейнера.
docker port
Выводит список отображений открытых портов для заданного контейнера.
docker ps
Предоставляет общую информацию о работающих контейнерах.
docker top
Предоставляет информацию о процессах, выполняющихся внутри заданного контейнера.
--------------------------
Работа с образами
--------------------------
docker build
Создает образ из файла Dockerfile.
docker commit
Создает образ из указанного контейнера. Для настройки метаданных применяются аргументы -a и -m.
docker export
Экспортирует содержимое файловой системы заданного контейнера в виде tar-архива, направляя его в стандартный поток вывода STDOUT. Созданный архив может быть загружен командой docker import.
docker history
Выводит информацию о каждом уровне в образе.
docker images
Выводит список локальных образов, содержащий такую информацию, как имя репозитория, имя тега, размер и др.
$ docker images | head -4
docker load
Загружает репозиторий из tar-архива, передаваемого через стандартный поток ввода STDIN .
docker rmi
Удаляет заданный образ или несколько образов. Образы определяются идентификатором или комбинацией имен репозитория и тега.
docker save
Сохраняет именованные образы или репозитории в tar-архив, передаваемый в стандартный поток вывода STDOUT (для записи в файл используйте аргумент -o ). Образы можно задавать по идентификаторам или в форме repository:tag.
$ docker save -o /tmp/redis.tar redis:latest
$ docker rmi redis:latest
$ docker load -i /tmp/redis.tar
$ docker images redis
docker tag
Связывает имя репозитория и тега с заданным образом.
----------------------------
Команды для работы с реестром
----------------------------
docker login
Выполняет процедуру регистрации или входа на заданный сервер реестра.
docker logout
Выполняет процедуру выхода из реестра Docker.
docker pull
Загружает заданный образ из реестра.
docker push
Выгружает образ или репозиторий в заданный реестр.
docker search
Выводит список общедоступных репозиториев из реестра Docker Hub
-------------------------------