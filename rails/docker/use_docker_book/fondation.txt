fondation.txt
Формат командной оболочки – строка произвольной формы, передаваемая для интерпретации в /bin/sh -c

Инструкции Dockerfile
http://docs.docker.com/reference/builder/

ADD
Копирует файлы из контекста создания или из удаленных URL-ссылок в создаваемый образ.

CMD
Запускает заданную инструкцию во время инициализации контейнера.

COPY
Используется для копирования файлов из контекста создания в образ. Имеет два формата: COPY источник цель и COPY ["источник", "цель"]

ENTRYPOINT
Определяет выполняемый файл (программу) (и аргументы по умолчанию), запускаемый при инициализации контейнера.

ENV
Определяет переменные среды внутри образа.
...
ENV MY_VERSION 1.3
RUN apt-get install -y mypackage=$MY_VERSION
...

EXPOSE
Сообщает механизму Docker о том, что в данном контейнере будет существовать процесс, прослушивающий заданный порт или несколько портов. Механизм Docker использует эту информацию при установлении соединения между контейнерами

FROM
Определяет основной образ для файла Dockerfile.

MAINTAINER
Определяет метаданные об авторе «Author» для создаваемого образа в заданной строке. Извлечь эти метаданные можно с помощью команды docker inspect -f {{.Author}} IMAGE .

ONBUILD
Определяет инструкцию, которая должна выполняться позже, когда данный образ будет использоваться как основной уровень для другого образа.

RUN
Запускает заданную инструкцию внутри контейнера и сохраняет результат.

USER
Задает пользователя (по имени или по идентификатору UID) для использования во всех последующих инструкциях RUN , CMD , ENTRYPOINT .

VOLUME
Объявляет заданный файл или каталог как том.

WORKDIR
Определяет рабочий каталог для всех последующих инструкций RUN , CMD , ENTRPOINT , ADD , COPY . Инструкцию можно использовать несколько раз.
-------------------------------
Установление связи контейнеров с внешним миром
$ docker run -d -p 8000:80 nginx
$ curl localhost:8000
-------------------------------
Соединение между контейнерами (links)
Соединения инициализируются с помощью аргумента --link CONTAINER:ALIAS в команде docker run , где CONTAINER – имя контейнера-адресата (link container) 1 ,  а ALIAS – локальное имя, используемое внутри управляющего контейнера для обращения к контейнеру-адресату.
$ docker run -d --name myredis redis
$ docker run --link myredis:redis debian env
--------------------------------
Управление данными с помощью томов и контейнеров данных
1. объявить том при запуске контейнера с помощью флага -v :
$ docker run -it --name container-test -h CONTAINER -v /data debian /bin/bash
$ docker inspect -f {{.Mounts}} container-test
2. с помощью инструкции VOLUME в файле Dockerfile:
FROM debian:wheezy
VOLUME /data
** Установка прав доступа к тому в файле Dockerfile
FROM debian
RUN useradd foo
RUN mkdir /data && touch /data/x
RUN chown -R foo:foo /data
VOLUME /data
3. расширение аргумента -v команды docker run с явным указанием связываемого каталога хоста в формате -v HOST_DIR:CONTAINER_DIR. Каталог файловой системы хоста /home/adrian/data монтируется как /data в контейнере. Все файлы, уже существующие в каталоге /home/adrian/data, становятся доступными внутри контейнера.
$ docker run -v /home/adrian/data:/data debian ls /data

---------------------------
Совместное использование данных
$ docker run -it -h NEWCONTAINER --volumes-from container-test debian /bin/bash
---------------------------
Контейнеры данных (data containers)
Например, можно создать контейнер данных для СУБД PostgreSQL, выполнив следующую команду:
$ docker run --name dbdata postgres echo "Data-only container for postgres"
$ docker run -d --volumes-from dbdata --name db1 postgres
Нет необходимости оставлять контейнеры данных в активном рабочем состоянии

