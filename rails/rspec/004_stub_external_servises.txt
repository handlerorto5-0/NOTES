https://thoughtbot.com/blog/how-to-stub-external-services-in-tests#disable-all-remote-connections
Как заглушить внешние службы в тестах

Отключить все удаленные подключения
Во-первых, убедитесь, что наш набор тестов не может выполнять внешние запросы, отключив их в spec_helper.rb:
# spec/spec_helper.rb
require 'webmock/rspec'
WebMock.disable_net_connect!(allow_localhost: true)

убедитесь, что любые внешние запросы вызовут исключение и прервут сборку:
# spec/features/external_request_spec.rb
require 'spec_helper'

feature 'External request' do
  it 'queries FactoryGirl contributors on GitHub' do
    uri = URI('https://api.github.com/repos/thoughtbot/factory_girl/contributors')

    response = Net::HTTP.get(uri)

    expect(response).to be_an_instance_of(String)
  end
end
теперь видны ошибки при выполнении внешних запросов, можно исправить это, заглушив любые запросы к api.github.com с помощью Webmock и вернув предварительно определенный контент.
# spec/spec_helper.rb
RSpec.configure do |config|
  config.before(:each) do
    stub_request(:get, /api.github.com/).
      with(headers: {'Accept'=>'*/*', 'User-Agent'=>'Ruby'}).
      to_return(status: 200, body: "stubbed response", headers: {})
  end
end
test run
==
Другой подход к предотвращению внешних запросов - записать живое взаимодействие и «воспроизвести» его во время тестов. У VCR gem есть концепция кассет, которые будут записывать исходящие HTTP-запросы ваших тестовых наборов, а затем воспроизводить их для будущих тестовых запусков.
Мы создадим поддельную версию сервиса GitHub (Sinatra).
Сначала используйте Webmock для маршрутизации всех запросов в наше приложение Sinatra, FakeGitHub.
# spec/spec_helper.rb
RSpec.configure do |config|
  config.before(:each) do
    stub_request(:any, /api.github.com/).to_rack(FakeGitHub)
  end
end
Затем создайте приложение FakeGitHub.
# spec/support/fake_github.rb
require 'sinatra/base'

class FakeGitHub < Sinatra::Base
  get '/repos/:organization/:project/contributors' do
    json_response 200, 'contributors.json'
  end

  private

  def json_response(response_code, file_name)
    content_type :json
    status response_code
    File.open(File.dirname(__FILE__) + '/fixtures/' + file_name, 'rb').read
  end
end
сщздать фейковый отклик (https://api.github.com/repositories/21829/contributors)
# spec/support/fixtures/contributors.json
[
  {
    "login": "joshuaclayton",
    "id": 1574,...
Обновите тест и убедитесь, что возвращается ожидаемый ответ на заглушку.
require 'spec_helper'

feature 'External request' do
  it 'queries FactoryGirl contributors on GitHub' do
    uri = URI('https://api.github.com/repos/thoughtbot/factory_girl/contributors')

    response = JSON.load(Net::HTTP.get(uri))

    expect(response.first['login']).to eq 'joshuaclayton'
  end
end
Run the specs.