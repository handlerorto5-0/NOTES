session_storages.txt

Sticky sessions
https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-sticky-sessions.html
Самое простое в AWS Elastic Load Balancer - включить закрепленные сеансы. ELB создаст cookie, и в следующий раз, когда запрос вернется, он будет отправлен в тот же экземпляр EC2, что и раньше.

Redis
https://github.com/redis-store/redis-rails
# config/environments/development.rb
config.redis_host = 'localhost'
# config/initializers/session_store.rb
AppName::Application.config.session_store :redis_store, {
  servers: [
    { host: Rails.application.config.redis_host, port: 6379, db: 0, namespace: "session" },
  ],
  expire_after: 1.day
}
# data in Redis
{"db":0,"key":"session:63f3a232ca05b895b0d9adb1b292903e","ttl":7192,   "type":"string","value":"...","size":138}

Mongo
https://github.com/mongoid/mongo_session_store
# Gemfile
gem "mongoid"
gem "mongo_session_store"
# config/initializers/session_store.rb
MyApp::Application.config.session_store :mongoid_store
MongoSessionStore.collection_name = "sessions"
class Sessions
  include Mongoid::Document
  field :data
  field :created_at, 	type: DateTime
  field :updated_at, 	type: DateTime
  # create index to clean out the collection
  index({updated_at: 1}, {expire_after_seconds: 1.day})  
end

ActiveRecord / SQL
https://github.com/rails/activerecord-session_store
#config/initializers/session_store.rb
Rails.application.config.session_store :active_record_store,
  :key => '_my_app_session'
Таблица сеансов будет иметь ID (первичный ключ), session_id (ea2c0d7d8b5799c0f48966c9312f95e8), data, created_at и updated_at. Поскольку MySQL / Postgres не имеет процесса TTL, нам нужно будет создать фоновое задание для очистки этих записей.
class SessionCleanJob < ApplicationJob
  queue_as :low
  def perform(*args)
    # delete all session records older than X time
  end
end