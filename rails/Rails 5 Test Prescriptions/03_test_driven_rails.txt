Глава 3 Test-Driven Rails стр 41

end-to-end тесты с Capybara
Capybara позволяет тестам описывать взаимодействие пользователя с веб-страницей и объектной моделью документа (DOM).

Настройка:
- Gemfile
group :test do
	gem "capybara"
end
- раскоментировать в rails_helper
Dir[Rails.root.join("spec/support/**/*.rb")].each { |f| require f }
- добавить папку spec/support/
- запустить rack_test, предоставляемый Capybara для имитации дерева DOM браузера без JavaScript.
/spec/support/system.rb
RSpec.configure do |config|
	config.before(:each, type: :system) do
		driven_by :rack_test
	end
end
-------------------------------------
Пример системного теста, юзер добавляет проект:
require "rails_helper"

RSpec.describe "adding a project", type: :system do
  it "allows a user to create a project with tasks" do
    visit new_project_path
    fill_in "Name", with: "Project Runway"
    fill_in "Tasks", with: "Choose Fabric:3\nMake it Work:5"
    click_on("Create Project")
    visit project_path
    expect(page).to have_content("Project Runway")
    expect(page).to have_content(8)
  end
end
--------------------------------------
Ожидающие тесты

RSpec позволяет указать тест как ожидающий или вообще пропустить его. В RSpec любой метод it, определенный без блока, считается «ожидающим».
- определяется с указателем
it "...", :pending do
или явно
it "..." do
	pending "not implemented yet"
end

Все ожидающие спецификации фактически запускаются, если в блочной части спецификации есть код. Если код в ожидающей спецификации пройден, будет ошибка, "...удалите статус ожидания".
Что бы ожидающие не запускались вообще:
- skip вместо pending 
- префикс x, как в xit или xdescribe
--------------------------------------------------
rails generate resource project name:string due_date:date
rails generate resource task project:references title:string size:integer completed_at:datetime
rails db:migrate
-------------------------------------------------
Workflow Рабочий процесс

Отдельный класс для инкапсуляции логики и рабочего процесса:
app/workflows/creates_project.rb
class CreatesProject
	attr_accessor :name, :project
	def initialize(name: "")
		@name = name
	end
	def build
		self.project = Project.new(name: name)
	end
end
И тестируем:
spec/workflows/creates_project_spec.rb
require "rails_helper"
RSpec.describe CreatesProject do
	it "creates a project given a name" do
		creator = CreatesProject.new(name: "Project Runway")
		creator.build
		expect(creator.project.name).to eq("Project Runway")
	end
end
----------------------------------------
expect(tasks).to match(
      [an_object_having_attributes(title: "Start Things", size: 3),
      an_object_having_attributes(title: "End Things", size: 2)])
эквивалентно
expect(tasks[0]).to have_attributes(title: "Start Things", size: 3)
expect(tasks[1]).to have_attributes(title: "End Things", size: 2)
----------------------------------------
single-assertion style написания тестов
везде исползуем describe м алис specify, это доёт гибче прменять let

describe "with a single string" do
      let(:task_string){"Start Things"}
      specify {expect(tasks.size).to eq(1)}
      specify {expect(tasks.first).to have_attributes(title: "Start Things", size: 1)}
end
----------------------------------------
rspec-given gem 
позволяет заменить блоки let и define на Given, When и Then
можно заменить что-то вроде define {expect (tasks.size).to eq (1)} более прямым Then{tasks.size == 1}
----------------------------------------
RSpec предлагает настройку метаданных: aggregate_failures. При применении к любому описанию или блоку, RSpec не остановится после первого сбоя, но покажет все сбои в спецификации.
Можно установить: aggregate_failures как значение по умолчанию в конфигурации RSpec, не рекомендуeтся
----------------------------------------
Поскольку в Rails 5 было проделано много работы по ускорению интеграционных тестов, тесты контроллеров становятся менее ценными.
----------------------------------------
Тестирование видов

Метод has_selector принимает в качестве аргумента селектор в стиле jQuery, где обычный # представляет идентификатор DOM, а точка (.) Представляет класс DOM. Утверждение проходит, если страница содержит элемент DOM, соответствующий селектору. Вы также можете указать параметр text :, который означает, что соответствующий элемент DOM также должен содержать определенный текст (или соответствовать определенному регулярному выражению).

Например в тесте:
вместо
expect(page).to have_content("Project Runway")
более гибко искать по селектору
expect(page).to have_selector(
      "#project_#{@project.id} .name", text: "Project Runway"
    )
в коде вида
<% @projects.each do |project| %>
	<tr class="project-row" id="<%= dom_id(project) %>">
		<td class="name"><%= project.name %></td>
		<td class="total-size"><%= project.total_size %></td>
	</tr>
<% end %>
==================================================
Тестирование на отказ

Один из приёмов, искать селектор на странице, куда нас должно перепраить после цдасной валидации.
expect(page).to have_selector(".new_project")

Пример классического теста на отказ:
describe 'failure cases' do
    it "fails when trying to save a project with no name" do
      creator = CreatesProject.new(name: "", task_string: "")
      creator.create 
      expect(creator).not_to  be_a_success
    end
  end
--
Есть простой способ заставить RSpec сосредоточиться только на выполнении ошибок, раскомментируйте в spec / spec_helper.rb:
config.example_status_persistence_file_path = "spec/examples.txt"
генерирует отчет в spec/examples.txt (добавить .gitignore)
----------------------------
Для сохранения уже введёных даннах, при неудачной попытки валидации 
в модели добавить @success=false в конструктор, и обработать в методах ето свойства, а в акшене создания сделать проверку
if @workflow.success?
      redirect_to projects_path
else
      @project = @workflow.project
      render :new
end
----------------------------













