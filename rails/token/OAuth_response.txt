Ответ авторизации
В зависимости от типа разрешения сервер авторизации ответит либо кодом авторизации, либо токеном доступа.

Ответ кода авторизации
Если запрос действителен и пользователь предоставляет запрос на авторизацию, сервер авторизации генерирует код авторизации и перенаправляет пользователя обратно в приложение, добавляя код и предыдущее значение «состояния» к URL-адресу перенаправления.

Генерация кода авторизации
Срок действия кода авторизации должен истечь вскоре после его выдачи. Спецификация OAuth 2.0 рекомендует максимальное время жизни 10 минут, но на практике большинство сервисов устанавливают срок действия намного короче, около 30-60 секунд. Сам код авторизации может быть любой длины, но длина кодов должна быть задокументирована.

Поскольку коды авторизации должны быть недолговечными и одноразовыми, они являются отличным кандидатом для реализации как самокодирующиеся. С помощью этого метода вы можете избежать хранения кодов авторизации в базе данных и вместо этого закодировать всю необходимую информацию в самом коде. Вы можете использовать либо встроенную библиотеку шифрования вашей серверной среды, либо такой стандарт, как JSON Web Signature (JWS). Поскольку эта строка должна быть понятна только вашему серверу авторизации, нет необходимости реализовывать ее с использованием стандарта, такого как JWT. Тем не менее, если у вас нет легкодоступной уже доступной библиотеки шифрования, JWT - отличный кандидат, так как библиотеки доступны на многих языках.

Информация, которая должна быть связана с кодом авторизации, следующая.

client_id - идентификатор клиента (или другой идентификатор клиента), который запросил этот код
redirect_uri - URL-адрес перенаправления, который использовался. Это необходимо сохранить, поскольку запрос токена доступа должен содержать тот же URL перенаправления для проверки при выдаче токена доступа.
User info - некоторый способ идентифицировать пользователя, для которого предназначен этот код авторизации, например ID пользователя.
Expiration Date - код должен включать дату истечения срока, чтобы он длился недолго.
Unique ID - для кода нужен собственный уникальный идентификатор, чтобы можно было проверить, использовался ли код раньше. Достаточно идентификатора базы данных или случайной строки.

После того, как вы сгенерировали код авторизации, либо путем создания строки в кодировке JWT, либо путем создания случайной строки и сохранения связанной информации в базе данных, вам нужно будет перенаправить пользователя на указанный URL-адрес перенаправления приложения. Параметры, которые нужно добавить в строку запроса URL-адреса перенаправления, следующие:
code
Этот параметр содержит код авторизации, который позже клиент обменяет на токен доступа.

state
Если первоначальный запрос содержал параметр состояния, ответ также должен включать точное значение из запроса. Клиент будет использовать это, чтобы связать этот ответ с первоначальным запросом.

Например, сервер авторизации перенаправляет пользователя, отправляя следующий HTTP-ответ.
-
HTTP/1.1 302 Found
Location: https://example-app.com/redirect?code=g0ZGZmNjVmOWI&state=dkZmYxMzE2
-

Неявный ответ типа гранта
С неявным предоставлением сервер авторизации немедленно генерирует токен доступа и перенаправляет на URL обратного вызова с токеном и другими параметрами во фрагменте.
Например, сервер авторизации перенаправляет пользователя, отправляя следующий HTTP-ответ.
-
HTTP/1.1 302 Found
Location: https://example-app.com/redirect#access_token=MyMzFjNTk2NTk4ZTYyZGI3
 &state=dkZmYxMzE2
 &token_type=bearer
 &expires_in=86400
-

Ответ об ошибке
Есть два разных типа ошибок, которые нужно обрабатывать. Первый тип ошибки - это когда разработчик сделал что-то не так при создании запроса на авторизацию. Другой вид ошибки - это когда пользователь отклоняет запрос (нажимает кнопку «Запретить»).

Если что-то не так с синтаксисом запроса, например, redirect_uri или client_id недействителен, тогда важно не перенаправлять пользователя, а вместо этого вы должны показать сообщение об ошибке напрямую. Это сделано для того, чтобы ваш сервер авторизации не использовался в качестве открытого перенаправителя.

Если redirect_uri и client_id действительны, но все еще есть какая-то другая проблема, можно перенаправить пользователя обратно на URI перенаправления с ошибкой в строке запроса.

При перенаправлении обратно в приложение, чтобы указать на ошибку, сервер добавляет следующие параметры в URL-адрес перенаправления:
error
один код ошибки ASCII из следующего списка:

invalid_request - в запросе отсутствует параметр, он содержит недопустимый параметр, включает параметр более одного раза или является недопустимым по иным причинам.
access_denied - пользователь или сервер авторизации отклонил запрос
unauthorized_client - клиенту не разрешено запрашивать код авторизации с помощью этого метода, например, если конфиденциальный клиент пытается использовать неявный тип предоставления.
unsupported_response_type - сервер не поддерживает получение кода авторизации с помощью этого метода, например, если сервер авторизации никогда не реализовывал неявный тип предоставления.
invalid_scope - запрошенная область недопустима или неизвестна.
server_error - вместо того, чтобы отображать для пользователя страницу 500 Internal Server Error, сервер может перенаправить с этим кодом ошибки.
Temporary_unavailable - если сервер находится на обслуживании или недоступен по иным причинам, этот код ошибки может быть возвращен вместо ответа с кодом состояния 503 Service Unavailable.

error_description
Сервер авторизации может дополнительно включать в себя удобочитаемое описание ошибки. Этот параметр предназначен для того, чтобы разработчик понял ошибку, и не предназначен для отображения конечному пользователю. Допустимые символы для этого параметра - это набор символов ASCII, за исключением двойных кавычек и обратной косой черты, в частности шестнадцатеричные коды 20-21, 23-5B и 5D-7E.

error_uri
Сервер также может возвращать URL-адрес удобочитаемой веб-страницы с информацией об ошибке. Это предназначено для разработчика, чтобы получить дополнительную информацию об ошибке, и не предназначено для отображения конечному пользователю.

state
Если запрос содержал параметр состояния, ответ об ошибке также должен включать точное значение из запроса. Клиент может использовать это, чтобы связать этот ответ с начальным запросом.

Например, если пользователь отклонил запрос авторизации, сервер создаст следующий URL-адрес и отправит ответ перенаправления HTTP, как показано ниже (новые строки в URL-адресе служат для иллюстрации).
-
HTTP/1.1 302 Found
Location: https://example-app.com/redirect?error=access_denied
 &error_description=The+user+denied+the+request
 &error_uri=https%3A%2F%2Foauth2server.com%2Ferror%2Faccess_denied
 &state=wxyz1234
-
