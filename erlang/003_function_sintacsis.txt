function clause - уравнение функции:

greet(male, Name) ->
	io:format("Здавствуйте, господин ~s!", [Name]);
вместо
if gender == male 
	print("Здравствуйте, господин #{name)!")
разделяется ; , оканчивается .
function(X) ->
	Expretion;
function(Y) ->
	Expretion;
function(_) ->
	Expretion.


--------------------------------------------------------------------
io.format
~ (тильда) начало токена
~n перевод строки
~s печатает строки и битовые строки
io:format("~s!~n", ["Hello"]). вывод "Hello\n"
io:format("~f~n",[4.0]). вывод 4.000000


-------------------------------------------------------------------
переменные в связке:
same(X,X) ->
	true;
same(_,_) ->
	false.
сравнит дае переменные
-------------------------------------------------------------------
Охранные условия (guards):

Функция может принять что угодно в качестве значений.
old_enough(X) when X >= 16 -> true;
old_enough(_)              -> false.

в охранных условиях, типа X>=N; N>-= 0 , точка с запятой явл (orelse, or else или ещё), если первое условие не прошло, будет проверенно второе и так далее
Запятая в X >=N, N>=0 -andalso(and also - а также), условие будет проверенно сразу
правильные сравнения:
(A orelse B) andalso C  - в порядке
(Z*A/C >=0)   - вычисления
is_integer/1, is_atom/1 - ф-ии проверяют тип данных

---------------------------------------------------------
if если:
охранные образцы
any_funs() ->
	if 1 =:= 1 ->
		works
	end, ... .
true способ написпь else
   if N =:= 2 -> might_succeed:
   		true  -> always_does
   end.
----------------------------------------------------------
case ... of ... end.
beach(Temperature) ->
    case Temperature of
      {celsius, N} when N >=20, N =<45 ->
        'favorable';
      {kelvin, N} when N >=293, N =<318 ->
        'scientifically favorable';
      [fahrenheit, N] when N >=68, N =<113 ->
        'favorable in the US';
      _ ->
        'avoid beach'
    end.
