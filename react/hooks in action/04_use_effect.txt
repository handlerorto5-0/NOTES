Глава 4 Работа с побочными эффектами стр 92
===========================================
Распознавание типов побочных эффектов в компонентах

Действие, которое каким-то образом затрагивает внешний мир, называется побочным эффектом:
- Обязательная установка заголовка страницы
- Работа с таймерами типа setInterval или setTimeout
- Измерение ширины, высоты или положения элементов в DOM
- Запись сообщений в консоль или другую службу
- Установка или получение значений в локальном хранилище
- Получение данных или подписка и отказ от подписки на услуги

Хук useEffect - это путь к безопасному взаимодействию с внешним миром.

===========================================
Обертывание побочных эффектов с помощью хука useEffect

Синтаксис:
useEffect( () => { /* выполнить побочный эффект */ } );
* есть доступ к переменным в области компонента
* [] второй фргумент useEffect(), список зависимостей
-------------------------------------------
Побочные эффекты после каждого рендеринга

Простой пример рандомного заголовка:
import React, { useState, useEffect } from "react";

export default function SayHello () {
	const greetings = ["Hello", "Ciao", "Hola", "こんにちは"];
	const [index, setIndex] = useState(0);
	useEffect(() => {
		document.title = greetings[index];
		function updateGreeting () {
		setIndex(Math.floor(Math.random() * greetings.length));
	}
	return <button onClick={updateGreeting}>Say Hi</button>
}
* вызывается каждый раз при нажатии на кнопку

-------------------------------------------
Запуск эффекта только при монтировании компонента

Пример отображения ширины и высоты окна при изменении его размера:
import React, { useState, useEffect } from "react";

export default function WindowSize () {
	// получает состояние из функции
	const [size, setSize] = useState(getSize());

	function getSize () {
		return {
			width: window.innerWidth,
			height: window.innerHeight
		};
	}

	useEffect(() => {
		function handleResize () {
			setSize(getSize());
		}
		// сдушает событие и запускает функцию
		window.addEventListener('resize', handleResize);
	}, []);

	return <p>Width: {size.width}, Height: {size.height}</p>
}
* Пустой список зависимостей вызывает однократное выполнение эффекта при первом монтировании компонента.
-------------------------------------------
Удаление побочных эффектов путем возврата функции

Необходимо быть осторожным обрабатывая долгосрочные побочные эффекты.
Для етого применяют межанизм везврата функцию из эффекта.
В верхнем примере чтобы удалить прослушиватель изменения размера, когда он больше не нужен ,надо добавить после
window.addEventListener('resize', handleResize);
конструкцию возврата 
return () => window.removeEventListener('resize', handleResize);

Синтаксис:
useEffect( () => {
	// выполнение стороннего еффекта
	return function () { /* очистка стороннего эфекта */ };
}, [ ] );
* например, отписаться, остановить таймеры, удалить слушателей и т.д.

React запускает функцию очистки при:
- отключении компонента
- когда компонент повторно отрисовывается

-------------------------------------------
Управление запуском эффекта путем указания зависимостей
4.1.4 стр 99 , здесь пока окончил

===========================================
Управление запуском эффекта путем указания списка зависимостей
===========================================
Возврат функции очистки из эффекта
===========================================
Использование эффекта для получения данных для компонента
