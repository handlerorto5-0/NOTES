=====================================
Веб-коммуникация в реальном времени (WebRTC) - это стандарт, позволяющий браузерам напрямую обмениваться медиафайлами в реальном времени с другими браузерами в одноранговой сети.
	Общая архитектурная модель WebRTC основана на так называемой трапеции SIP (Session Initiation Protocol) (RFC3261).
	Сигнальные сообщения (через сервер) используются для установления и прекращения связи. Они передаются по протоколу HTTP или WebSocket через веб-серверы, которые могут изменять, переводить или управлять ими по мере необходимости. PeerConnection позволяет мультимедиа перемещаться напрямую между браузерами без каких-либо промежуточных серверов.
	API WebRTC предоставляет широкий набор функций, таких как управление подключением (в одноранговой сети), согласование возможностей кодирования / декодирования, выбор и управление, управление мультимедиа, межсетевой экран и обход элементов NAT и т. Д.

Описание сеанса представляет собой наиболее важную информацию, которой необходимо обмениваться. Он определяет транспортную информацию (и установление интерактивного соединения [ICE]), а также тип, формат и все связанные параметры конфигурации мультимедиа, необходимые для установления пути мультимедиа. 

протокол установления сеанса JavaScript (JSEP) предоставляет интерфейс, необходимый приложению для работы с согласованными локальными и удаленными описаниями сеансов (с согласованием, выполняемым через любой желаемый механизм сигнализации), а также стандартизованный способ взаимодействия с конечным автоматом ICE.

Все медиа и потоки данных зашифрованы используя DTLS, Datagram Transport Layer Security, (RFC6347) разработан для предотвращения перехвата, подделки или подделки сообщений для транспорта дейтаграмм, предлагаемого протоколом пользовательских дейтаграмм (UDP). Протокол DTLS основан на протоколе TLS, ориентированном на потоки, и предназначен для предоставления аналогичных гарантий безопасности.

API разработан на основе трех основных концепций: MediaStream, PeerConnection и DataChannel.

MediaStream - это абстрактное представление фактического потока данных аудио и/или видео. Он служит дескриптором для управления действиями в потоке мультимедиа, такими как отображение содержимого потока, его запись или отправка удаленному узлу.

LocalMediaStream представляет поток мультимедиа с локального устройства захвата мультимедиа (например, веб-камеры, микрофона и т. Д.). Чтобы создать и использовать локальный поток, веб-приложение должно запрашивать доступ у пользователя через функцию getUserMedia (). Приложение указывает тип носителя - аудио или видео - к которому ему требуется доступ.

PeerConnection позволяет двум пользователям общаться напрямую, браузер с браузером.Связь координируется через канал сигнализации, предоставляемый кодом сценария на странице через веб-сервер, например, с помощью XMLHttpRequest или WebSocket. Как только одноранговое соединение установлено, медиапотоки (локально связанные с произвольно определенными объектами MediaStream) могут быть отправлены непосредственно в удаленный браузер.

Session Traversal Utilities for NAT (STUN) RFC5389). Утилиты обхода сеанса для протокола NAT позволяют хост-приложению обнаруживать присутствие транслятора сетевых адресов в сети и в таком случае получать выделенный общедоступный IP-адрес и кортеж портов для текущего соединения. Для этого протоколу требуется помощь настроенного стороннего STUN-сервера, который должен находиться в общедоступной сети.

Обход с использованием реле по протоколу NAT (TURN) (RFC5766) позволяет хосту за NAT получить общедоступный IP-адрес и порт от сервера ретрансляции, находящегося в общедоступном Интернете. Благодаря ретранслируемому транспортному адресу хост может получать мультимедийные данные от любого однорангового узла, который может отправлять пакеты в общедоступный Интернет.

Механизм PeerConnection использует протокол ICE вместе с серверами STUN и TURN, чтобы позволить потокам мультимедиа на основе UDP проходить через блоки NAT и межсетевые экраны. ICE позволяет браузерам обнаруживать достаточно информации о топологии сети, в которой они развернуты, чтобы найти наиболее подходящий для использования путь связи. Использование ICE также обеспечивает меру безопасности, так как предотвращает отправку данных ненадежными веб-страницами и приложениями на хосты, которые не ожидают их получения.

API DataChannel разработан для предоставления универсальной транспортной службы, позволяющей веб-браузерам обмениваться общими данными в двунаправленной одноранговой сети.
Настройка DataChannel выполняется при первом вызове функции CreateDataChannel () для созданного экземпляра объекта PeerConnection.

Пример:
Когда Алиса нажимает кнопку веб-страницы, чтобы начать вызов с Бобом, JavaScript создает экземпляр объекта PeerConnection. После создания PeerConnection код JavaScript на стороне вызывающей службы должен настроить мультимедиа и выполнить такую задачу с помощью функции MediaStream. Также необходимо, чтобы Алиса разрешила вызывающей службе доступ как к своей камере, так и к микрофону.

В текущем API W3C после добавления некоторых потоков браузер Алисы, обогащенный кодом JavaScript, генерирует сигнальное сообщение. Точный формат такого сообщения еще полностью не определен. Мы знаем, что он должен содержать информацию о медиа-канале и кандидатах ICE, а также атрибут отпечатка пальца, связывающий сообщение с открытым ключом Алисы. Затем это сообщение отправляется на сервер сигнализации (например, XMLHttpRequest или WebSocket).

JavaScript в браузере Боба обрабатывает входящее сообщение и предупреждает Боба. Если Боб решит ответить на вызов, JavaScript, запущенный в его браузере, создаст экземпляр PeerConnection, связанный с сообщением, поступающим со стороны Алисы. Затем произойдет процесс, аналогичный тому, что происходит в браузере Алисы. Браузер Боба проверяет, что вызывающая служба одобрена и медиапотоки созданы; после этого сигнальное сообщение, содержащее мультимедийную информацию, кандидатов ICE и отпечаток пальца, отправляется обратно Алисе через службу сигнализации.





