https://ocaml.org/
https://wikichi.ru/wiki/OCaml
https://habr.com/ru/post/108529/
OCaml имеет в своем арсенале средства для написания безопасных программ, ошибки в которых можно выявить еще на этапе написания кода. Для этого язык имеет статическую типизацию, автоматическое выведение типов и средства для формальной верификации кода.
Кроме того, у OCaml очень достойный оптимизирующий компилятор, и по производительности код на OCaml не уступает коду, написанному на C.
В OCaml есть все то, к чему мы привыкли в функциональных языках: сопоставление с образцом, функции первого класса, параметрический полиморфизм и иммутабельность.
------------------------------------------
https://reasonml.github.io/
ReasonML предоставляет программистам, знающим JavaScript, новый, более знакомый синтаксис для OCaml. Код, написанный на ReasonML, может хорошо вписаться в существующую систему OCaml. Можно скомпилировать ReasonML в переносимый байт-код, собственный код или JavaScript с функциями, доступными в зависимости от выбранной платформы.
Компилятор ReasonML берет код и переводит его в абстрактное синтаксическое дерево (AST) OCaml - промежуточный этап компиляции. 
----------------------------------------
Особенности:
- ReasonML использует расширение .re
- Функция Js.log() записывает в терминал.
- нельзя использовать одинарные кавычки для строк.
- ReasonML требует точки с запятой в конце оператора.
- если имя начинается со строчной буквы или символа подчеркивания(_PI), это переменная, если оно начинается с заглавной буквы, это имя модуля.
----------------------------------------
Установка:
npm install -g bs-platform
или
yarn global add bs-platform
Инструменты для ide:
reasonml.github.io/docs/en/installation
----------------------------------------
Создание проекта:
в каталоге /code/reason_ml/
$ bsb -init first-project -theme basic-reason
создаст каталог с проектом first-project
Сборка и запуск программы:
$ npm run build
или
$ yarn build
$ bsb -make-world

запуск сoзданного файла
node src/Demo.bs.js

-----------------------------------------
Переменные и арифметика:
Переменные ReasonML неизменяемы. После того, как вы привяжете символ к значению, вы не сможете его изменить.
Не делать так:
let x = 6;
let x = 7;
Функция Js.log2 () записывает значения своих аргументов в консоль. Также есть Js.log3 () и Js.log4 (). В ReasonML нет функций с нефиксированным числом аргументов. (не канкатениреем для сохранения типов)
------------------------------------------
Работа с типами
integer и floating операторы:
Operation   Integer   Float
Addition       +        +.
Subtraction    -        -.
Multiplication *        *.
Division       /        /.
Remainder      mod
Exponentiation          **
-------------------------------------------
Обьявление и преобразование типов
int_of_float(14.50) -> 14
float_of_int(7)  -> 7.0

let qty: int = 7;
let price: float = 14.50;
let total: float = float_of_int(qty) *. price;
-------------------------------------------
Математические футкции sqrt(),sin(),cos(),tan() ...
let result = sqrt(abs_float(-3.75));
let r = 7.0;
let area = Js.Math._PI *. r *. r;
-------------------------------------------
Выполнение условных вычислений
- ключевое слово if вводит выражение, а не инструкцию. Этот
Важное отличие означает, что вы можете привязать результат выражения if к переменной. Это также означает, что вы должны предоставить предложение else, и результаты обоих предложений должны быть одного типа.
- операции сравнения <, <=, >, =>, ==, !=

let discount =
	if (qty < 10) {
		0.05;
	} else {
		0.10;
	};

- Операции над значениями типа bool: && (и), || (или), и! (нет)
- тернальный оператор
let discount = (qty < 10) ? 0.05 : 0.10;
-----------------------------------------
Обработка строк

- простая конкатенация
let str = "door" ++ "bell"; -> doorbell
- приведение к типу строки
Js.Float.toString(total)
- приведение к типу перед конкатенацией
Js.log("Price before discount: $" ++ Js.Float.toString(total) ++ "."); 

- ReasonML предоставляет множество функций в библиотеке Js.String:
JavaScript         ReasonML
str.length         Js.String.length(str)
str.toUpperCase    Js.String.toUpperCase(str)
str.indexOf("cat") Js.String.indexOf("cat", str)
----------------------------------------
Обработка Unicode
Js.log({js|Цена без скидки: |js} ++ Js.Float.toString(total) ++ {js| Руб|js});
много линий:
let poem = {js|The boy stood on the burning deck, 
	Whence all but he had fled; 
The flames that lit the battle’s wreck...|js};
Js.log(poem);
интерполяция:
Js.log({j|Prix avant réduction: $total € |j});

















