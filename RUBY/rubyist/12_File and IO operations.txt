Ruby’s I/O system  система ввода-вывода

STDERR.class  => IO 
STDERR.puts("Problem!")  Problem!  => nil 
STDERR.write("Problem!\n")  Problem!  => 9 

>> STDIN.each {|line| p line }
This is line 1
"This is line 1\n"

>> STDIN.select {|line| line =~ /\A[A-Z]/ }
We're only interested in
lines that begin with
Uppercase letters
^D
=> ["We're only interested in\n", "Uppercase letters\n"]

>> STDIN.map {|line| line.reverse }
senil esehT
terces a niatnoc
.egassem
^D
=> ["\nThese lines", "\ncontain a secret", "\nmessage."]
-------------------------------------------------------------
STDIN, STDOUT, STDERR константы, также есть глоб переменные $stdin, $stdout, $stderr

use STDERR for output
if broken?
	STDERR.puts "There's a problem!"
end

gets возвратит линию. getc returns возвратит один символ
char = STDIN.getc
line = STDIN.gets

--------------------------------------------------
Операции с файлами
File is a subclass of IO

Чтение из файла:
f = File.new("code/ticket2.rb") откроет существ файл для чтения
f.read
f.close не забывать

f.gets читает по одной линии при отсутствии возвр nil
f.readline по одной начиная с позиции и при отсутствии возвр EOFError
f.readlines читает начиная с позиции и при отсутствии возвр  []
f.rewind   вернёт позицию в начало файла
f.each {|line| puts "Next line: #{line}" }

f.getc возьмет символ из потока
f.ungetc("X") заменит в потоке(пока файл открыт для чтения)

f.readchar по одной начиная с позиции и при отсутствии возвр EOFError
f.getbyte  итает по одной линии при отсутствии возвр nil
f.readbyte по одной начиная с позиции и при отсутствии возвр EOFError

f.pos вернёт позицию начиная с 0
f.pos = 10  поместить позицию

Метод seek позволяет перемещаться по файлу, перемещая указатель положения в
новое место
f.seek(20) делает тоже, что и f.pos(20) но побайтово
f.seek(20, IO::SEEK_SET) ищет байт 20
f.seek(15, IO::SEEK_CUR) продвигает указатель на 15 байт от текущей позиции
f.seek(-10, IO::SEEK_END) ищет до 10 байт от конца
------------------------------------------------------
Чтение файла с file class методами

full_text = File.read("myfile.txt")
lines_of_text = File.readlines("myfile.txt")
-----------------------------------------------------
Запись в файл
File objects are enumerable
puts , print , or write on a File

f = File.new("data.out", "w") "a"
f.puts "David A. Black, Rubyist"
f.close

File.open с блоком автоматом открывает и закрывает файл
File.open("records.txt") do |f|: while record = f.gets ... end
или f.each do |record| вместо while

count = 0
total_ages = File.open("members.txt") do |f|
f.inject(0) do |total,line|  
... end

File I/O exceptions and errors
Errno::ENOENT (No such file
Errno::EISDIR (Is a directory
Errno::EACCES (Permission denied

---------------------------------------------------
Запрос объектов ввода-вывода и файлов

File.size("code/ticket2.rb")
FileTest.size("code/ticket2.rb")
File::Stat.new("code/ticket2.rb").size

File или FileTest юез разницы:
 Does a file exist?
FileTest.exist?("/usr/local/src/ruby/README")
 Is the file empty?
FileTest.empty?("/etc/crontab")
 Is the file a directory? A regular file? A symbolic link?
FileTest.directory?("/var/log/syslog")
FileTest.file?("/var/log/syslog")
FileTest.symlink?("/var/log/syslog")
This family of query methods also includes blockdev? , pipe? , chardev? , and
socket? .
 Is a file readable? Writable? Executable?
FileTest.readable?("/tmp")
FileTest.writable?("/tmp")
FileTest.executable?("/bin/rm")
world_readable? and world_writable? with _real appended
 What is the size of this file? Is the file empty (zero bytes)?
FileTest.size("/sbin/mkfs")
FileTest.zero?("/tmp/tempfile")

Getting file information with Kernel#test
test ?e, "/tmp"  выясняет, существует ли / tmp
?d true, если второй аргумент является каталогом
?f true, если второй аргумент является обычным файлом
?z true, если второй аргумент является файлом нулевой длины

Получение информации с  File::Stat
File::Stat.new("code/ticket2.rb")
File.open("code/ticket2.rb") {|f| f.stat }
times of creation ( ctime )
last modification ( mtime )
last access ( atime )

------------------------------------------------
Directory manipulation with the Dir class

d = Dir.new("code/something/somthin_yet")
Чтение:
entries = d.entries   или  Dir.entries("code")
entries.delete_if {|entry| entry =~ /^\./ }
entries.map! {|entry| File.join(d.path, entry) }
entries.delete_if {|entry| !File.file?(entry) }
print "Total bytes: "
puts entries.inject(0) {|total, entry| total + File.size(entry) }

Символы подстановки в ruby  Dir.glob или Dir.[]
Dir["code/*.?xt"]
Dir.glob("info", File::FNM_CASEFOLD) без учёта регистра
Dir.glob("*info*", File::FNM_DOTMATCH) с учётом файлов начинающихся с точки
Dir.glob("*info*", File::FNM_DOTMATCH | File::FNM_CASEFOLD)
флаги можно заменить номерами из библиотеки fnmatch
Dir.glob("*info*", 0) без флагов тоже Dir["*info*"]

dir = "code"
entries = Dir["#{dir}/*"].select {|entry| File.file?(entry) }
puts entries.inject(0) {|total, entry| total + File.size(entry) }

Dir.mkdir(newdir)
ir.chdir(newdir) do
	File.open(newfile, "w") do |f|  ...end
File.unlink(newfile) удвлить
Dir.rmdir(newdir)

------------------------------------------------------
Файловые инструменты из стандартной библиотеки

The FileUtils module
FileUtils.rm_rf emulates the rm -rf command
FileUtils.ln_s(filename the ln -s command

require 'fileutils'
FileUtils.cp("baker.rb", "baker.rb.bak")
FileUtils.mkdir("backup")
FileUtils.cp(["ensure.rb", "super.rb"], "backup")
FileUtils.mv("baker.rb.bak", "backup")
FileUtils.rm("./backup/super.rb")
FileUtils.rm_rf("backup")

THE DRY RUN AND NOWRITE MODULES
FileUtils::DryRun.rm_rf("backup") отобразит команду оболочки rm -rf backup
FileUtils::NoWrite.rm("backup/super.rb") гарантирует от случайного удаления

The Pathname class
require 'pathname'
path = Pathname.new("/Users/dblack/hacking/test1.rb")
path.basename
path.dirname
path.extname  -расширение
вложенность
path.ascend do |dir|
	puts "Next level up: #{dir}"
end
path.ascend do |dir|
	puts "Ascended to #{dir.basename}"
end

The StringIO class  трактует строку, как IO объект
Например, есть модуль, который парсит файл: он читает из одного файла и записывает все, что не является комментарием, в другой файл
module DeCommenter
	def self.decomment(infile, outfile, comment_re = /\A\s*#/)
		infile.each do |inline|
			outfile.print inline unless inline =~ comment_re
		end
	end
end
File.open("myprogram.rb") do |inf|
	File.open("myprogram.rb.out", "w") do |outf|
		DeCommenter.decomment(inf, outf)
	end
end
что бы потестить можно tf = Tempfile.new("my_temp_file") или
require 'stringio'
require_relative 'decommenter'
string = <<EOM
# This is a comment.
This isn't a comment.
# This is.
# So is this.
This is also not a comment.
EOM
infile = StringIO.new(string)
outfile = StringIO.new("")
DeCommenter.decomment(infile,outfile)
puts "Test succeeded" if outfile.string == <<EOM
This isn't a comment.
This is also not a comment.
EOM

The open-uri library
require 'open-uri'
rubypage = open("http://rubycentral.org")
puts rubypage.gets
